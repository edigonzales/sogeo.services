<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>http://www.sogeo.services</link>
    <atom:link href="http://www.sogeo.services/feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Fri, 12 Feb 2016 07:03:06 -0600</pubDate>
    <lastBuildDate>Fri, 12 Feb 2016 07:03:06 -0600</lastBuildDate>

    <item>
      <title>Interlis leicht gemacht #7</title>
      <link>http://www.sogeo.services/blog/2016/02/11/interlis-leicht-gemacht-number-7.html</link>
      <pubDate>Thu, 11 Feb 2016 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2016/02/11/interlis-leicht-gemacht-number-7.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Seit &lt;a href=&quot;https://github.com/claeis/ili2db/commit/85d167e0c4fd491567cd8e8bab3bd9f8e7a85eed&quot;&gt;kurzem&lt;/a&gt; gibt es neu auch &lt;a href=&quot;http://www.eisenhutinformatik.ch/interlis/ili2gpkg/&quot;&gt;ili2gpkg&lt;/a&gt;. Damit kann aus einer INTERLIS-Transferdatei schnell und ohne eine PostgreSQL-Datenbank am Laufen zu haben eine GeoPackage-Datei erstellt werden. Diese kann dann in &lt;a href=&quot;http://www.qgis.org&quot;&gt;QGIS&lt;/a&gt; oder ArcGIS visualisert und bearbeitet werden. Der Befehl zum Erstellen des GeoPackages ist praktisch identisch dem Befehl zum Importieren in eine PostGIS-Datenbank:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;java -jar ili2gpkg.jar --import --nameByTopic --modeldir http://models.geo.admin.ch --models DM01AVCH24D --dbfile av_solothurn.gpkg ch_260100.itf&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Im Prinzip stehen die gleichen Optionen wie bei &lt;a href=&quot;http://www.eisenhutinformatik.ch/interlis/ili2pg/&quot;&gt;ili2pg&lt;/a&gt; zur Verfügung. Einige gibt es natürlich nicht, z.B. die DB-Connection-Parameter. Die werden einfach durch den Filenamen-Parameter ersetzt: &lt;code&gt;--dbfile&lt;/code&gt;. Natürlich ist man dabei nicht nur auf das Erstellen (= Lesen von INTERLIS) von GeoPackage-Dateien beschränkt. Man kann ebenso aus GeoPackage-Dateien INTERLIS-Transfer-Dateien erstellen. Dazu in einem späteren Beitrag mehr.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eine Anwendungsmöglichkeit unter vielen ist z.B. ein kleiner Webdienst, wo man eine INTERLIS-Transferdatei hochladen kann und als Antwort die GeoPackage-Datei bekommt. Klassischerweise würde man hier ein Java-Servlet schreiben. Fürs Prototyping erstelle ich aber ein &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/documentation/servlet-userguide.html&quot;&gt;Groovlet&lt;/a&gt;. Man kann sich das auf dem Web/Servlet-Container so einrichten, dass alle in einem Ordner liegende &lt;code&gt;*.groovy&lt;/code&gt;-Dateien als Servlet resp. eben als Groovlet ausgeführt werden. Zum Rumspielen noch ganz praktisch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Als erstes brauchen wir das Upload-Formular. Dazu reichen ein paar Zeichen Groovy, das uns das benötigte HTML erstellt:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;html.html {
    head {
        meta(&lt;span class=&quot;key&quot;&gt;charset&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;utf-8&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;)
        meta(&lt;span class=&quot;key&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;viewport&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;width=device-width, initial-scale=1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;)
        meta(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;x-ua-compatible&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;content&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ie=edge&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;)

        title &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ili2gpkg online converter&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;
        style &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;
            label { display: block; padding: 0.2em; }
        &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&apos;&apos;&lt;/span&gt;&lt;/span&gt;
    }
    body {
        h1 &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;INTERLIS (ITF/XTF) to GeoPackage Converter&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;
        form &lt;span class=&quot;key&quot;&gt;action&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;do_ili2gpkg.groovy&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;method&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;enctype&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;multipart/form-data&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, {
            label &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Reference frame: &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, {
                select &lt;span class=&quot;key&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;reference_frame&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, {
                    option &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;LV03&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;
                    option &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;LV95&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;
                }
            }
            label &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;--strokeArcs&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, {
                input &lt;span class=&quot;key&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;checkbox&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;checked&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;checked&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;strokeArcs&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;strokeArcs&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;
            }
            label &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;--skipPolygonBuilding&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, {
                input &lt;span class=&quot;key&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;checkbox&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;skipPolygonBuilding&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;skipPolygonBuilding&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;
            }
            label &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;--nameByTopic&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, {
                input &lt;span class=&quot;key&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;checkbox&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;checked&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;checked&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;nameByTopic&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;nameByTopic&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;
            }
            label &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;File: &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, {
                input &lt;span class=&quot;key&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;
            }
            input &lt;span class=&quot;key&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Send to server&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;
        }
    }
}&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das sind ganz schön nach 90er-Jahre aus, aber es fehlt schliesslich auch jegliches Styling:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p7/ili2gpkg_html_form.png&quot; alt=&quot;ili2gpkg upload formular&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Von den unzähligen Programmoptionen lassen wir nur vier zu, die der Anwender via Webformular auswählen kann:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--defaultSrsCode&lt;/code&gt;: Entweder LV03 oder LV95.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--skipPolygonBuilding&lt;/code&gt;: Falls gewünscht, wird die Flächenbildung für Polygone nicht gemacht und es bleiben &amp;laquo;Spaghetti&amp;raquo;-Daten. Dies kann sehr praktisch für die Verifikation von Datenlieferungen sein. Bei der Flächenbildung &lt;a href=&quot;http://www.sogeo.services/blog/2015/10/03/interlis-leicht-gemacht-number-5.html&quot;&gt;bereinigt&lt;/a&gt; ili2gpkg zulässige Overlaps, um OGC-konforme Geometrien zu erhalten. Um jedoch wirklich die Original-Geometrien zu erhalten und diese bei Grenzfällen besser beurteilen zu können, lohnt es sich manchmal nur die Linien zu betrachten.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--strokeArcs&lt;/code&gt;: Kreisbogen werden segmentiert.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--nameByTopic&lt;/code&gt;: Die Tabellen in der GeoPackage-Datenbank werden nach dem Muster &lt;code&gt;Topicname_Classname&lt;/code&gt; benannt.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wie man dem Groovy-Skript resp. der HTML-Datei entnehmen kann, ist &lt;code&gt;do_ili2gpkg.groovy&lt;/code&gt; das Groovy-Skript, das beim Senden aufgerufen wird. Dieses übernimmt die eigentliche Umwandlung INTERLIS &amp;#8594; GeoPackage:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
47
48
49
&lt;strong&gt;50&lt;/strong&gt;
51
52
53
54
55
56
57
58
59
&lt;strong&gt;60&lt;/strong&gt;
61
62
63
64
65
66
67
68
69
&lt;strong&gt;70&lt;/strong&gt;
71
72
73
74
75
76
77
78
79
&lt;strong&gt;80&lt;/strong&gt;
81
82
83
84
85
86
87
88
89
&lt;strong&gt;90&lt;/strong&gt;
91
92
93
94
95
96
97
98
99
&lt;strong&gt;100&lt;/strong&gt;
101
102
103
104
105
106
107
108
109
&lt;strong&gt;110&lt;/strong&gt;
111
112
113
114
115
116
117
118
119
&lt;strong&gt;120&lt;/strong&gt;
121
122
123
124
125
126
127
128
129
&lt;strong&gt;130&lt;/strong&gt;
131
132
133
134
135
136
137
138
139
&lt;strong&gt;140&lt;/strong&gt;
141
142
143
144
145
146
147
148
149
&lt;strong&gt;150&lt;/strong&gt;
151
152
153
154
155
156
157
158
159
&lt;strong&gt;160&lt;/strong&gt;
161
162
163
164
165
166
167
168
169
&lt;strong&gt;170&lt;/strong&gt;
171
172
173
174
175
176
177
178
179
&lt;strong&gt;180&lt;/strong&gt;
181
182
183
184
185
186
187
188
189
&lt;strong&gt;190&lt;/strong&gt;
191
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;annotation&quot;&gt;@Grapes&lt;/span&gt;([
   &lt;span class=&quot;annotation&quot;&gt;@GrabResolver&lt;/span&gt;(name=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;catais.org&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, root=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://www.catais.org/maven/repository/release/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, m2Compatible=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;),
   &lt;span class=&quot;annotation&quot;&gt;@Grab&lt;/span&gt;(group=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;commons-fileupload&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, module=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;commons-fileupload&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, version=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;1.3.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;),
   &lt;span class=&quot;annotation&quot;&gt;@Grab&lt;/span&gt;(group=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;commons-io&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, module=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;commons-io&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, version=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;2.4&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;),
   &lt;span class=&quot;annotation&quot;&gt;@Grab&lt;/span&gt;(group=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.xerial&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, module=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;sqlite-jdbc&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, version=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;3.8.11.2&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;),
   &lt;span class=&quot;annotation&quot;&gt;@Grab&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ch.interlis:ili2c:4.5.21&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;),
   &lt;span class=&quot;annotation&quot;&gt;@Grab&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ch.interlis:ili2gpkg:3.0.0&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;),
   &lt;span class=&quot;comment&quot;&gt;//@GrabConfig(systemClassLoader = true)&lt;/span&gt;
])

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;javax.servlet.http.HttpServletResponse&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;javax.servlet.ServletOutputStream&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;java.util.logging.Logger&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;java.nio.file.Path&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;java.nio.file.Files&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.apache.commons.io.IOUtils&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.apache.commons.io.FilenameUtils&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.apache.commons.io.FileUtils&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.apache.commons.fileupload.FileItem&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.apache.commons.fileupload.util.Streams&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.apache.commons.fileupload.servlet.ServletFileUpload&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.apache.commons.fileupload.disk.DiskFileItemFactory&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.apache.commons.fileupload.FileUploadException&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ch.ehi.ili2db.base.Ili2db&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ch.ehi.ili2db.base.Ili2dbException&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ch.ehi.ili2db.gui.Config&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ch.ehi.ili2db.mapping.NameMapping&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ch.ehi.basics.logging.EhiLogger&lt;/span&gt;

&lt;span class=&quot;predefined-type&quot;&gt;Logger&lt;/span&gt; logger = &lt;span class=&quot;predefined-type&quot;&gt;Logger&lt;/span&gt;.getLogger(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;do_ili2gpkg.groovy&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
logger.setUseParentHandlers(&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;)
logger.info (&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Starts at: &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Date&lt;/span&gt;())

&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ServletFileUpload.isMultipartContent(request)) {
    ServletFileUpload upload = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ServletFileUpload(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DiskFileItemFactory())
    &lt;span class=&quot;comment&quot;&gt;//upload.setSizeMax(52428800) // 50MB&lt;/span&gt;
    upload.setSizeMax(&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;integer&quot;&gt;5242880&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 2*5MB&lt;/span&gt;

    &lt;span class=&quot;predefined-type&quot;&gt;List&lt;/span&gt;&amp;lt;FileItem&amp;gt; items = &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
        items = upload.parseRequest(request);
    } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (FileUploadException e) {
        logger.severe e.getMessage()
        response.sendError(HttpServletResponse.SC_FORBIDDEN, e.getMessage())
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;
    }

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; items) {
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (item.isFormField()) { &lt;span class=&quot;comment&quot;&gt;// &apos;normal&apos; form fields&lt;/span&gt;
            &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; fieldName = item.getFieldName()
            &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; value = item.getString()

            params[fieldName] = value
            logger.info fieldName.toString()
            logger.info value.toString()
            logger.info item.getClass().toString()

        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; { &lt;span class=&quot;comment&quot;&gt;// files&lt;/span&gt;
            &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; fieldName = item.getFieldName()
            &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; fileName = FilenameUtils.getName(item.getName())

            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fileName.equalsIgnoreCase(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)) {
                &lt;span class=&quot;comment&quot;&gt;// return &apos;bad request&apos; (400) if no file was sent&lt;/span&gt;
                &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; errorMessage = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;No file chosen.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
                logger.severe errorMessage
                response.sendError(HttpServletResponse.SC_BAD_REQUEST, errorMessage)
                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;
            }

            &lt;span class=&quot;comment&quot;&gt;// get the file as input stream&lt;/span&gt;
            &lt;span class=&quot;predefined-type&quot;&gt;InputStream&lt;/span&gt; fileContent = item.getInputStream()

            &lt;span class=&quot;comment&quot;&gt;// create random temporary directory&lt;/span&gt;
            &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; tmpDirPrefix = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ili2gpkg_&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;
            Path tmpDir = Files.createTempDirectory(tmpDirPrefix);

            &lt;span class=&quot;comment&quot;&gt;// copy input stream into target file&lt;/span&gt;
            &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; targetFileName = fileName
            &lt;span class=&quot;predefined-type&quot;&gt;File&lt;/span&gt; targetFile = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;File&lt;/span&gt;(tmpDir.toString() + &lt;span class=&quot;predefined-type&quot;&gt;File&lt;/span&gt;.separator + targetFileName)

            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
                FileUtils.copyInputStreamToFile(fileContent, targetFile)
                logger.info &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Uploaded file: &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + targetFile.toString()
                logger.info &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Uploaded file size [KB]: &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) (targetFile.length() / &lt;span class=&quot;integer&quot;&gt;1024&lt;/span&gt;)
            } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (java.io.IOException e) {
                FileUtils.deleteDirectory(tmpDir.toFile())

                logger.severe e.getMessage()
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage())
                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;
            }

            &lt;span class=&quot;comment&quot;&gt;// create configuration for ili2gpkg&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; config = initConfig(params)

            &lt;span class=&quot;comment&quot;&gt;// Set the name of the geopackage.&lt;/span&gt;
            &lt;span class=&quot;comment&quot;&gt;// Same name as input file but with *.gpkg extension instead.&lt;/span&gt;
            &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; gpkgFileName = FilenameUtils.removeExtension(targetFileName) + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.gpkg&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
            gpkgFullFileName = tmpDir.toString() + &lt;span class=&quot;predefined-type&quot;&gt;File&lt;/span&gt;.separator + gpkgFileName
            config.setDbfile(gpkgFullFileName)
            config.setDburl(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;jdbc:sqlite:&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;+config.getDbfile())
            config.setXtffile(targetFile.toString())

            &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; fileExtension = FilenameUtils.getExtension(targetFileName)
            &lt;span class=&quot;predefined-type&quot;&gt;System&lt;/span&gt;.out.println(fileExtension)
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fileExtension.equalsIgnoreCase(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;itf&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)) {
                config.setItfTranferfile(&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;)
            }

            &lt;span class=&quot;comment&quot;&gt;// Now create the GeoPackage.&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
                &lt;span class=&quot;comment&quot;&gt;//EhiLogger.getInstance().setTraceFilter(false)&lt;/span&gt;
                Ili2db.runImport(config, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
            } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Ili2dbException e) {
                logger.severe e.getMessage()
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage())
                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;
            }

            &lt;span class=&quot;comment&quot;&gt;// Send GeoPackage to browser.&lt;/span&gt;
            response.setContentType(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;application/x-sqlite3&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
            response.setHeader(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Content-Disposition&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;attachment; filename=&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + gpkgFileName);
            ServletOutputStream os = response.getOutputStream();
            &lt;span class=&quot;predefined-type&quot;&gt;FileInputStream&lt;/span&gt; fis = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;FileInputStream&lt;/span&gt;(gpkgFullFileName);
            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
                &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; buffSize = &lt;span class=&quot;integer&quot;&gt;1024&lt;/span&gt;
                &lt;span class=&quot;type&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;[]&lt;/span&gt; buffer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;byte&lt;/span&gt;[buffSize]
                &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len
                &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((len = fis.read(buffer)) != -&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;) {
                    os.write(buffer, &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;, len)
                    os.flush()
                    response.flushBuffer()
                }
            } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; e) {
                logger.severe e.getMessage()
            }
            &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; {
                FileUtils.deleteDirectory(tmpDir.toFile())
            }
        }
    }
}

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;initConfig&lt;/span&gt;(params) {
    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; config = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Config()
    config.setModeldir(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://models.geo.admin.ch/;http://models.geo.gl.ch/;http://www.catais.org/models&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
    config.setModels(Ili2db.XTF)
    config.setSqlNull(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;enable&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
    config.setDefaultSrsAuthority(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;EPSG&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
    config.setDefaultSrsCode(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;21781&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
    config.setMaxSqlNameLength(&lt;span class=&quot;predefined-type&quot;&gt;Integer&lt;/span&gt;.toString(NameMapping.DEFAULT_NAME_LENGTH));
    config.setIdGenerator(ch.ehi.ili2db.base.TableBasedIdGen.class.getName());
    config.setInheritanceTrafo(config.INHERITANCE_TRAFO_SMART1);
    config.setCatalogueRefTrafo(Config.CATALOGUE_REF_TRAFO_COALESCE);
    config.setMultiSurfaceTrafo(Config.MULTISURFACE_TRAFO_COALESCE);
    config.setMultilingualTrafo(Config.MULTILINGUAL_TRAFO_EXPAND);

    config.setGeometryConverter(ch.ehi.ili2gpkg.GpkgColumnConverter.class.getName());
    config.setDdlGenerator(ch.ehi.sqlgen.generator_impl.jdbc.GeneratorGeoPackage.class.getName());
    config.setJdbcDriver(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.sqlite.JDBC&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
    config.setIdGenerator(ch.ehi.ili2db.base.TableBasedIdGen.class.getName());
    config.setIli2dbCustomStrategy(ch.ehi.ili2gpkg.GpkgMapping.class.getName());
    config.setOneGeomPerTable(&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;);

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (param &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; params) {
        &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; key = param.key

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (key.equalsIgnoreCase(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;strokeArcs&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)) {
            config.setStrokeArcs(config.STROKE_ARCS_ENABLE)
        }

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (key.equalsIgnoreCase(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;nameByTopic&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)) {
            config.setNameOptimization(config.NAME_OPTIMIZATION_TOPIC)
        }

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (key.equalsIgnoreCase(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;skipPolygonBuilding&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)) {
            config.setDoItfLineTables(&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;);
            config.setAreaRef(config.AREA_REF_KEEP);
        }

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (key.equalsIgnoreCase(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;reference_frame&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)) {
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (param.value.equalsIgnoreCase(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;LV95&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)) {
                config.setDefaultSrsCode(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;2056&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
            }
        }
    }
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; config
}

logger.info (&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Stops at: &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Date&lt;/span&gt;())&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 1 - 9&lt;/strong&gt;: Die notwendigen Bibliotheken werden mittels &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/documentation/grape.html&quot;&gt;Grape&lt;/a&gt; einmalig heruntergeladen. Die &lt;code&gt;*.jar&lt;/code&gt;-Dateien landen dann im &lt;code&gt;.groovy/grapes/&lt;/code&gt;-Verzeichnis des Apache-Tomcat-Users und nicht etwa im &lt;code&gt;lib&lt;/code&gt;-Verzeichnis von Apache-Tomcat selbst. Der Befehl &lt;code&gt;@GrabConfig(systemClassLoader = true)&lt;/code&gt; scheint nicht notwendig zu sein, wenn das Skript als Groovlet in Apache Tomcat läuft.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 11 - 28&lt;/strong&gt;: Notwendige Imports werden gemacht. Für den File-Upload verwenden wir die Apache-Commons-Bibliotheken. Ab &lt;a href=&quot;http://docs.oracle.com/javaee/6/tutorial/doc/glrbb.html&quot;&gt;Servlet-Spezifikation 3.0&lt;/a&gt; gibt es dafür native Unterstützung. Heruntergebrochen auf ein Groovlet habe ich das aber nicht zum Laufen gebracht. Daher wird hier wieder die old-school-Methode verwendet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeile 37&lt;/strong&gt;: Die maximale Grösse der Upload-Datei ist auf 10MB beschränkt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 49 - 58&lt;/strong&gt;: &amp;laquo;Normale&amp;raquo; Parameter aus dem HTML-Formular werden in einer &lt;code&gt;Map&lt;/code&gt; gespeichert. Sie werden später für die Konfiguration von ili2gpkg verwendet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 59 - 92&lt;/strong&gt;: Die gelieferte Datei wird entgegengenommen und in einem temporären Verzeichnis gespeichert.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 99 - 119&lt;/strong&gt;: Hier findet die eigentliche Umwandlung der INTERLIS-Transferdatei in die GeoPackage-Datei statt. Die &lt;code&gt;Config&lt;/code&gt;-Klasse wird mit den übermittelten Parameter aus dem HTML-Formular in einer separaten Methode konfiguriert. Ein INTERLIS-Modell oder ein -Repository kann nicht übermittelt werden. Das Modell wird aus der Transferdatei selber ermittelt (Zeile 148) und in den drei hardcodierten Repositories gesucht.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 121 - 140&lt;/strong&gt;: Zu guter Letzt wird die GeoPackage-Datei an den Browser zurückgesendet. Der Benutzer muss sie nur noch speichern.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p7/ili2gpkg_save_as.png&quot; alt=&quot;ili2gpkg download&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Resultat sieht genauso aus wie wir es von ili2pg gewohnt sind. Nur halt in einer GeoPackage-Datei:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p7/ili2gpkg_sqliteman.png&quot; alt=&quot;ili2gpkg sqliteman&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anschauen kann man sich das Resultat anschliessend in QGIS:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p7/ili2gpkg_qgis.png&quot; alt=&quot;ili2gpkg qgis&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Achtung&lt;/strong&gt;: ili2gpkg setzt den &lt;em&gt;Layer-Extent&lt;/em&gt; gemäss dem INTERLIS-Modell. Beim CH-Modell der amtlichen Vermessung entspricht das der Bounding-Box der gesamten Schweiz. Wenn man in QGIS &amp;laquo;Zoom to Layer Extent&amp;raquo; wählt, zoomt QGIS auf die gesamte Schweiz. Einerseits verwirrend, andererseits eigentlich korrekt. Aber darüber kann man sich sicher lange unterhalten.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Apache Tomcat sind drei Anpassungen vorzunehmen. Einerseits muss konfiguriert werden, dass alle &lt;code&gt;*.groovy&lt;/code&gt;-Dateien eines Verzeichnisses als Groovlet ausgeführt werden. Dies wird in der &lt;code&gt;web.xml&lt;/code&gt;-Datei gemacht (im Root-Element):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;Groovy&lt;span class=&quot;tag&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;groovy.servlet.GroovyServlet&lt;span class=&quot;tag&quot;&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;

&lt;span class=&quot;tag&quot;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;Groovy&lt;span class=&quot;tag&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;*.groovy&lt;span class=&quot;tag&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Zudem wollen wir dieses Verzeichnis an einem beliebigen Ort im Filesystem haben und nicht unterhalb des Tomcat-Installationsverzeichnisses. Dazu setzen wir einen &amp;laquo;Context Path&amp;raquo; in der Datei &lt;code&gt;server.xml&lt;/code&gt; unter &lt;code&gt;&amp;lt;Host&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;Host&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;attribute-name&quot;&gt;appBase&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;webapps&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;attribute-name&quot;&gt;unpackWARs&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;autoDeploy&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- SingleSignOn valve, share authentication between web applications
       Documentation at: /docs/config/valve.html --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!--
  &amp;lt;Valve className=&amp;quot;org.apache.catalina.authenticator.SingleSignOn&amp;quot; /&amp;gt;
  --&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Access log processes all example.
       Documentation at: /docs/config/valve.html
       Note: The pattern used is equivalent to using pattern=&amp;quot;common&amp;quot; --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;Valve&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.apache.catalina.valves.AccessLogValve&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;directory&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
         &lt;span class=&quot;attribute-name&quot;&gt;prefix&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;localhost_access_log&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;suffix&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.txt&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
         &lt;span class=&quot;attribute-name&quot;&gt;pattern&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;%h %l %u %t &lt;/span&gt;&lt;span class=&quot;entity&quot;&gt;&amp;amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;%r&lt;/span&gt;&lt;span class=&quot;entity&quot;&gt;&amp;amp;quot;&lt;/span&gt; &lt;span class=&quot;content&quot;&gt;%s %b&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;

 &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Groovlets --&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;tag&quot;&gt;&amp;lt;Context&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/groovy/ili2gpkg&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;docBase&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/home/stefan/Projekte/ili2gpkg_service/scripts&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;reloadable&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;tag&quot;&gt;&amp;lt;/Host&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Einzig die Zeilen 17 und 18 stammen von mir, alles Andere sind Default-Einstellungen. Der Eintrag bewirkt jetzt, dass der Request &lt;a href=&quot;http://www.example.com/groovy/ili2gpkg/mein_skript.groovy&quot; class=&quot;bare&quot;&gt;http://www.example.com/groovy/ili2gpkg/mein_skript.groovy&lt;/a&gt; im Verzeichnis &lt;code&gt;/home/stefan/Projekte/ili2gpkg_service/scripts/&lt;/code&gt; das Groovy-Skript &lt;code&gt;mein_skript.groovy&lt;/code&gt; sucht und, sofern vorhanden, ausführt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Als letztes muss noch die &lt;code&gt;groovy-all-x.y.z.jar&lt;/code&gt; in das &lt;code&gt;lib&lt;/code&gt;-Verzeichnis von Apache Tomcat kopiert werden. Dieses Groovy-&amp;laquo;Sorglos&amp;raquo;-Paket liegt dem &lt;a href=&quot;http://groovy-lang.org/download.html&quot;&gt;Download&lt;/a&gt; bei.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ein Live-Beispiel gibt es &lt;a href=&quot;http://www.sogeo.services/groovy/ili2gpkg/ili2gpkg.groovy&quot;&gt;hier&lt;/a&gt; (mspublic / mspublic).&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Interlis leicht gemacht #6</title>
      <link>http://www.sogeo.services/blog/2015/11/28/interlis-leicht-gemacht-number-6.html</link>
      <pubDate>Sat, 28 Nov 2015 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2015/11/28/interlis-leicht-gemacht-number-6.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die &lt;a href=&quot;http://www.cadastre.ch/internet/kataster/de/home/av.html&quot;&gt;Eidgenössische Vermessungsdirektion&lt;/a&gt; aggregiert verschiedene Metadaten der amtlichen Vermessung. Dazu zähle ich:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://models.geo.admin.ch/V_D/LowDistortionAreas_LV95_ili2.ili&quot;&gt;Spannungsarme Gebiete&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://models.geo.admin.ch/V_D/AMO_Grafik_LV95_e.ili&quot;&gt;Stand der amtlichen Vermessung&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://models.geo.admin.ch/V_D/AMO_Grafik_LV95_PNF.ili&quot;&gt;Stand der Periodischen Nachführung&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Daten werden von den Kantonen an die V+D geliefert und anschliessend werden sie publiziert:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;iframe src=&apos;https://map.geo.admin.ch/embed.html?topic=ech&amp;lang=de&amp;bgLayer=ch.swisstopo.swissimage&amp;layers_opacity=0.75,0.75,0.75&amp;X=249600.00&amp;Y=628300.00&amp;zoom=2&amp;layers=ch.swisstopo-vd.spannungsarme-gebiete,ch.swisstopo-vd.geometa-periodische_nachfuehrung,ch.swisstopo-vd.geometa-standav&amp;layers_visibility=false,true,false&apos; width=&apos;700&apos; height=&apos;500&apos; frameborder=&apos;0&apos; style=&apos;border:0&apos;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der &amp;laquo;Stand der amtlichen Vermessung&amp;raquo; war der erste Metadatensatz, den die Kantone liefern mussten. Das &lt;a href=&quot;http://models.geo.admin.ch/V_D/AMO_Grafik_LV95_e.ili&quot;&gt;dazugehörige INTERLIS-Modell&lt;/a&gt; ist einfach und besteht aus zwei Tabellen: &lt;code&gt;Actual_Status&lt;/code&gt; und &lt;code&gt;Actual_Status_Geometry&lt;/code&gt;. Die Herausforderung zu diesem Zeitpunkt war aber: Wie kriege ich meine Daten in eine INTERLIS-Transferdatei? Die Lösung war dann nicht so prickelnd: Ich schrieb einen 1:1-Prozessor, der mir die Transferdatei erstellt. Ein Geknorze sondergleichen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Heute geht das mit &lt;a href=&quot;http://www.eisenhutinformatik.ch/interlis/ili2pg/&quot;&gt;ili2pg&lt;/a&gt; und &lt;a href=&quot;http://www.qgis.org&quot;&gt;QGIS&lt;/a&gt; viel leichter und eleganter:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Schema mit Tabellen in PostgreSQL/Postgis anlegen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Daten erfassen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Daten exportieren&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Schritte (1) und (3) übernimmt ili2pg für uns. Die Daten erfassen müssen wir schon noch selber. Mit &lt;a href=&quot;http://www.qgis.org&quot;&gt;QGIS&lt;/a&gt; macht aber auch diese Arbeit Spass und geht leicht von der Hand. QGIS hat sehr mächtige &lt;a href=&quot;http://docs.qgis.org/2.8/en/docs/user_manual/working_with_vector/vector_properties.html#fields-menu&quot;&gt;Formularfunktionen&lt;/a&gt; und man kann sich damit so etwas wie eine &amp;laquo;Fachschale&amp;raquo; zusammenklicken.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Für den Datensatz &amp;laquo;Stand der Periodischen Nachführung&amp;raquo; soll nun der ganze Prozess exemplarisch durchgespielt werden. Zuerst legen wir mit ili2pg die leeren Tabellen in der Datenbank an:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;java -jar ili2pg.jar --schemaimport --dbhost localhost --dbport 5432 --dbdatabase rosebud2 --dbusr stefan --dbpwd ziegler12 --defaultSrsAuth EPSG --defaultSrsCode 2056 --createGeomIdx --createEnumTabs --nameByTopic --strokeArcs --dbschema av_pnf_stand_amo --modeldir http://models.geo.admin.ch --models AMO_Grafik_LV95_PNF&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mit den Optionen &lt;code&gt;--defaultSrsAuth EPSG&lt;/code&gt; und &lt;code&gt;--defaultSrsCode 2056&lt;/code&gt; wird ili2pg mitgeteilt, dass die Geometrie-Tabellen in der Datenbank im Bezugsrahmen LV95 angelegt werden sollen. &lt;code&gt;--createEnumTabs&lt;/code&gt; erstellt für Aufzähltypen eine eigene Tabelle. Diese Aufzähltyp-Tabellen sind später wichtig für die Arbeit mit QGIS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Resultat sieht relativ unspektakulär aus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../../../images/interlis_leicht_gemacht_p6/interlis_p6_pgadmin01.png&quot; alt=&quot;ili2pg schemaimport&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Es gibt zwei Tabellen im Modell resp. in der Datenbank: &lt;code&gt;pnf_pnf&lt;/code&gt; und &lt;code&gt;pnf_pnf_geometry&lt;/code&gt;. Die erste Tabelle beinhaltet alle Sachattribute, die zweite die Geometrie dazu. Zusätzlich wird in der Datenbank für jeden Aufzähltyp eine Tabelle angelegt. Der Inhalt der Tabelle &lt;code&gt;amo_grafik_lv95_pnf_cantons&lt;/code&gt; sieht - wenig überraschend - so aus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p6/interlis_p6_pgadmin02.png&quot; alt=&quot;Aufzähltypen Kantone&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Gute an ili2pg ist, dass man nachträglich auch ein paar Veränderungen/Verfeinerungen in den Datenbanktabellen vornehmen darf, die dem Datenerfasser das Leben erleichtern:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Modell gibt vor, dass die Kombination der Attribute &lt;code&gt;canton&lt;/code&gt; und &lt;code&gt;id&lt;/code&gt; eindeutig sein muss. In der Datenbanktabelle fügen wir  einen UNIQUE-Constraint hinzu:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;class&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;TABLE&lt;/span&gt; av_pnf_stand_amo.pnf_pnf &lt;span class=&quot;class&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;CONSTRAINT&lt;/span&gt; pnf_pnf_ili_unique &lt;span class=&quot;directive&quot;&gt;UNIQUE&lt;/span&gt; (canton, id);&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Des Weiteren erstellen wir zwei Sequenzen, damit der Primary Key in den Tabellen automatisch nachführt wird:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;comment&quot;&gt;-- sequence for t_id &amp;quot;pnf_pnf&amp;quot;&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;CREATE&lt;/span&gt; SEQUENCE av_pnf_stand_amo.pnf_t_id_seq;
&lt;span class=&quot;class&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;TABLE&lt;/span&gt; av_pnf_stand_amo.pnf_pnf &lt;span class=&quot;class&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;COLUMN&lt;/span&gt; t_id &lt;span class=&quot;class&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;DEFAULT&lt;/span&gt; nextval(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;av_pnf_stand_amo.pnf_t_id_seq&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;class&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;TABLE&lt;/span&gt; av_pnf_stand_amo.pnf_pnf &lt;span class=&quot;class&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;COLUMN&lt;/span&gt; t_id &lt;span class=&quot;class&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;NULL&lt;/span&gt;;
&lt;span class=&quot;class&quot;&gt;ALTER&lt;/span&gt; SEQUENCE av_pnf_stand_amo.pnf_t_id_seq OWNED &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; av_pnf_stand_amo.pnf_pnf.t_id;

&lt;span class=&quot;comment&quot;&gt;-- sequence for t_id &amp;quot;pnf_pnf_geometry&amp;quot;&lt;/span&gt;
&lt;span class=&quot;class&quot;&gt;CREATE&lt;/span&gt; SEQUENCE av_pnf_stand_amo.pnf_geometry_t_id_seq;
&lt;span class=&quot;class&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;TABLE&lt;/span&gt; av_pnf_stand_amo.pnf_pnf_geometry &lt;span class=&quot;class&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;COLUMN&lt;/span&gt; t_id &lt;span class=&quot;class&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;DEFAULT&lt;/span&gt; nextval(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;av_pnf_stand_amo.pnf_geometry_t_id_seq&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;class&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;TABLE&lt;/span&gt; av_pnf_stand_amo.pnf_pnf_geometry &lt;span class=&quot;class&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;COLUMN&lt;/span&gt; t_id &lt;span class=&quot;class&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;NULL&lt;/span&gt;;
&lt;span class=&quot;class&quot;&gt;ALTER&lt;/span&gt; SEQUENCE av_pnf_stand_amo.pnf_geometry_t_id_seq OWNED &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; av_pnf_stand_amo.pnf_pnf_geometry.t_id;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Somit wäre Schritt (1) erledigt und wir können die Daten in QGIS erfassen. Für die Datenerfassung in QGIS werden die Tabellen der Aufzähltypen, die eigentlichen Datentabellen sowie ein Datensatz der Gemeindegrenzen benötigt:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../../../images/interlis_leicht_gemacht_p6/interlis_p6_qgis01.png&quot; alt=&quot;QGIS Schritt 1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Zuallererst muss die &lt;a href=&quot;http://blog.vitu.ch/10112013-1201/qgis-relations&quot;&gt;Relation&lt;/a&gt; zwischen dem Layer &lt;code&gt;pnf_pnf&lt;/code&gt; und &lt;code&gt;pnf_pnf_geometry&lt;/code&gt; hergestellt werden. Somit weiss QGIS, dass die beiden Tabellen mit einer 1:n-Relation verknüpft sind:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p6/interlis_p6_qgis02.png&quot; alt=&quot;QGIS Schritt 2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anschliessend basteln wir uns mit den verschiedenen Editwidgets ein schönes Formular für die effiziente Datenerfassung:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p6/interlis_p6_qgis03.png&quot; alt=&quot;QGIS Schritt 3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Für die Attribute &lt;code&gt;canton&lt;/code&gt;, &lt;code&gt;practice&lt;/code&gt; und &lt;code&gt;reference_frame&lt;/code&gt; ist das Editwidget vom Typ &amp;laquo;Value Relation&amp;raquo; zu wählen. Als Inputlayer wählen wir die jeweilige Aufzähltyp-Tabelle, z.B. bei &lt;code&gt;cantons&lt;/code&gt; ist der Layer &lt;code&gt;amo_grafik_lv95_pnf_cantons&lt;/code&gt; zu wählen. Für das Attribut &lt;code&gt;year&lt;/code&gt; wählen wir den Typ &amp;laquo;Range&amp;raquo; und wählen den Bereich gemäss INTERLIS-Modell (2000 bis 2100).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anstelle der automatisch generierten Eingabemake, kann man sich mit Drag &apos;n&apos; Drop seine eigene Maske zusammenstöpseln. Wir verwenden diese Möglichkeit, um die 1:n-Relation in dieser Eingabemaske nicht darzustellen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p6/interlis_p6_qgis04.png&quot; alt=&quot;QGIS Schritt 4&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wenn wir anschliessend ein Feature im Layer &lt;code&gt;pnf_pnf&lt;/code&gt; erfassen, sieht das Formular wie folgt aus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p6/interlis_p6_qgis05.png&quot; alt=&quot;QGIS Schritt 5&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Beim Attribut &lt;code&gt;cantons&lt;/code&gt; haben wir den Typ &amp;laquo;Value Relation&amp;raquo; gewählt. Standardmässig erscheint bei diesem Typ eine Combobox. Wählt man jedoch die Option &amp;laquo;Use Completer&amp;raquo; erscheint keine Combobox, sondern es werden mögliche Werte aus der Aufzähltyp-Tabelle live vorgeschlagen. Dank den Editwidget-Typen wie &amp;laquo;Value Relation&amp;raquo; oder &amp;laquo;Range&amp;raquo; können so unnötige Tippfehler bei der Datenerfassung vermieden werden resp. es können gar keine nicht vorhandene Werte eingetippt werden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eine vollständig ausgefüllte Eingabemaske:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p6/interlis_p6_qgis06.png&quot; alt=&quot;QGIS Schritt 6&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Als nächstes müssen wir zu diesem PNF-Objekt den dazugehörigen Perimeter erfassen. Als Vorarbeit haben wir in QGIS die Relation definiert: Jedes PNF-Objekt kann gemäss INTERLIS-Modell mehrere Perimeter aufweisen. Also eine klassische 1:n-Beziehung. Interessant ist aber die Frage: wie kann ich einen Perimeter (den ich der Tabelle &lt;code&gt;pnf_pnf_geometry&lt;/code&gt; erfassen muss) korrekt einem Objekt der Tabelle &lt;code&gt;pnf_pnf&lt;/code&gt; zuweisen?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dazu wählen wir für den Layer &lt;code&gt;pnf_pnf_geometry&lt;/code&gt; beim Attribut &lt;code&gt;afrom&lt;/code&gt; (entspricht dem Fremdschlüssel) den Widgettyp &amp;laquo;Relation Reference&amp;raquo;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p6/interlis_p6_qgis07.png&quot; alt=&quot;QGIS Schritt 7&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Datenerfassung läuft dann wie folgt ab: Wir kopieren eine oder mehrere Gemeindegrenzen aus dem Layer mit den Gemeindengrenzen in den Layer &lt;code&gt;pnf_pnf_geometry&lt;/code&gt;. Anschliessend erfassen wir dazu die Daten. In diesem Fall ist das nur der Primary Key &lt;code&gt;t_id&lt;/code&gt; (interessiert uns ja nicht, da dieser automatisch vergeben wird) und das &amp;laquo;Beziehungsattribut&amp;raquo; (aka Fremdschlüssel) &lt;code&gt;afrom&lt;/code&gt;. Mit einer Combobox kann man das Objekt des Layers &lt;code&gt;pnf_pnf&lt;/code&gt; auswählen, dem man die Geometrie zuweisen will.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p6/interlis_p6_qgis08.png&quot; alt=&quot;QGIS Schritt 8&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Blöd nur, dass da bloss der Primary Key steht. Damit kann man meistens nichts anfangen. Viel besser wäre es, wenn man ein anderes Attribut darstellen könnte. Kann man. Ändern kann man das bei den Einstellungen im &amp;laquo;Relation Reference&amp;raquo;-Widget bei &amp;laquo;Display expression&amp;raquo;. Standardmässig steht da &lt;code&gt;COALESCE(&quot;t_id&quot;, &apos;&amp;lt;NULL&amp;gt;&apos;)&lt;/code&gt;. Anstelle von &lt;code&gt;t_id&lt;/code&gt; schreibt man das gewünschte Attribut hin. In unserem Fall &lt;code&gt;description&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p6/interlis_p6_qgis10.png&quot; alt=&quot;QGIS Schritt 10&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Möglich sind auch Kombinationen der Attribute resp. alles was &lt;a href=&quot;http://docs.qgis.org/2.8/en/docs/user_manual/working_with_vector/expression.html&quot;&gt;QGIS Expressions&lt;/a&gt; hergibt. Die Zuweisung der Geometrie zu einem Objekt ist jetzt viel einfacher:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p6/interlis_p6_qgis09.png&quot; alt=&quot;QGIS Schritt 9&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Geometrien möchte ich pro Jahr anders einfärben. Dazu müsste das Attribut &lt;code&gt;year&lt;/code&gt; im Layer &lt;code&gt;pnf_pnf_geometry&lt;/code&gt; vorhanden sein. Dieses Attribut ist aber im &amp;laquo;Parent&amp;raquo;-Layer &lt;code&gt;pnf_pnf&lt;/code&gt; vorhanden. Früher hat man sich dann mit einer View o.ä. geholfen. Das ist nicht mehr nötig. Mit der Kombination aus  &lt;a href=&quot;https://docs.qgis.org/2.8/en/docs/user_manual/working_with_vector/field_calculator.html&quot;&gt;Feldrechner&lt;/a&gt; und QGIS Expressions kann man virtuelle Felder mit Attributwerten aus anderen Layern erstellen. Die dazu benötige Expression: &lt;code&gt;attribute(get_feature(&apos;pnf_pnf&apos;,&apos;t_id&apos;,afrom),&apos;year&apos;)&lt;/code&gt;. Die Syntax ist unter Umständen ein klein wenig gewöhnungsbedürftig:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die erste Funktion &lt;code&gt;get_feature&lt;/code&gt; holt sich ein Feature aus einem anderen Layer (hier: &lt;code&gt;pnf_pnf&lt;/code&gt;). Der zweite und dritte Funktionsparameter beschreiben die jeweiligen Attribute der beiden Layer über die gejoined werden soll. Achtung: beim layereigenen Attribut sind keine Quotes notwendig. Die zweite Funktion &lt;code&gt;attribute&lt;/code&gt; extrahiert aus dem gefundenen &amp;laquo;Fremd&amp;raquo;-Feature ein Attribut. Der Parameter ist der Attributsname.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Ergebnis dieser Expression in Kombination mit dem Feldrechner ist ein virtuelles Feld im Layer &lt;code&gt;pnf_pnf_geometry&lt;/code&gt;, das ich zum Einfärben oder Beschriften verwenden kann:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p6/interlis_p6_qgis11.png&quot; alt=&quot;QGIS Schritt 11&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sind alle PNF-Objekte und die dazugehörigen Perimeter erfasst, kann mit ili2pg die INTERLIS-Transferdatei erzeugt werden:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;java -jar ili2pg.jar --export --dbhost localhost --dbport 5432 --dbdatabase rosebud2 --dbusr stefan --dbpwd ziegler12 --defaultSrsAuth EPSG --defaultSrsCode 2056 --createGeomIdx --createEnumTabs --nameByTopic --strokeArcs --dbschema av_pnf_stand_amo --modeldir http://models.geo.admin.ch --models AMO_Grafik_LV95_PNF stand_pnf_20151118.itf&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Resultat ist eine modellkonforme INTERLIS1-Transferdatei:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p6/interlis_p6_itf01.png&quot; alt=&quot;ITF Output&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Es hat sich dann leider herausgestellt, dass die Lieferung aber pro PNF-Jahr erfolgen muss, dh. in jedem ITF dürfen nur PNF-Objekte resp. -Perimeter eines Jahres vorhanden sein. Und zusätzlich verwirrend: Das Attribut &lt;code&gt;reference_frame&lt;/code&gt; beschreibt den Bezugsrahmen der erfassten Geometrien und nicht den Bezugsrahmen in dem die Periodische Nachführung durchgeführt worden ist. Nun gut. Was ich definitiv nicht will, ist pro Jahr ein DB-Schema. Aus diesem Grund erstelle ich ein &amp;laquo;export&amp;raquo;-Schema, das ich mit ein paar simplen SQL-Befehlen für jeweils ein Jahr abfülle und anschliessend mit ili2pg exportiere:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;class&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; av_pnf_stand_amo_export.pnf_pnf_geometry;
&lt;span class=&quot;class&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; av_pnf_stand_amo_export.pnf_pnf;

&lt;span class=&quot;class&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;INTO&lt;/span&gt; av_pnf_stand_amo_export.pnf_pnf (t_id, canton, id, description, practice, reference_frame, &lt;span class=&quot;predefined-type&quot;&gt;year&lt;/span&gt;)
&lt;span class=&quot;class&quot;&gt;SELECT&lt;/span&gt; t_id, canton, id, description, practice, reference_frame, &lt;span class=&quot;predefined-type&quot;&gt;year&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; av_pnf_stand_amo.pnf_pnf
&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;year&lt;/span&gt; = &lt;span class=&quot;integer&quot;&gt;2015&lt;/span&gt;;

&lt;span class=&quot;class&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;INTO&lt;/span&gt; av_pnf_stand_amo_export.pnf_pnf_geometry (t_id, afrom, perimeter)
&lt;span class=&quot;class&quot;&gt;SELECT&lt;/span&gt; g.t_id &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; t_id, g.afrom, g.perimeter
&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; av_pnf_stand_amo.pnf_pnf &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; p, av_pnf_stand_amo.pnf_pnf_geometry &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; g
&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; p.t_id = g.afrom
&lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; p.year = &lt;span class=&quot;integer&quot;&gt;2015&lt;/span&gt;;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fazit: Was früher knorzig und mühsam war, geht heute mit den richtigen Werkzeugen ruckzuck und entspannt vonstatten.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>State of WFS</title>
      <link>http://www.sogeo.services/blog/2015/10/18/state-of-wfs.html</link>
      <pubDate>Sun, 18 Oct 2015 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2015/10/18/state-of-wfs.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Oder wie soll man WFS &amp;laquo;richtig&amp;raquo; nutzen? Eines vorweg: ich weiss es nicht. Ein Direktzugriffsverfahren auf Daten mit Filterfunktionen ist toll und sinnvoll. Aber für mich stellen sich einige Fragen in zwei Themenfeldern:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Interaktion zwischen Benutzer und Service&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Umgang mit grossen Datenmengen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Und irgendwie eine Kombination von beidem.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die ganze Thematik mit &lt;a href=&quot;http://docs.geoserver.org/stable/en/user/data/app-schema/index.html&quot;&gt;Anwendungsschemen&lt;/a&gt; und &lt;a href=&quot;http://lists.osgeo.org/pipermail/mapserver-dev/2014-June/014087.html&quot;&gt;komplexen Feature&lt;/a&gt; lassen wir mal beiseite und gehen von good old &lt;a href=&quot;https://www.google.ch/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0CCEQFjAAahUKEwi17pPNuMzIAhWLVxoKHUvAC0E&amp;amp;url=http%3A%2F%2Fportal.opengeospatial.org%2Ffiles%2F%3Fartifact_id%3D15201&amp;amp;usg=AFQjCNGwftPpYIra3XPRMDwfqb-BGETqyw&amp;amp;sig2=slYt5wNVI48Niy8Ri6TXnw&quot;&gt;OGC SF-0&lt;/a&gt; aus. Das heisst &lt;a href=&quot;http://docs.geoserver.org/stable/en/user/data/app-schema/complex-features.html#simple-features&quot;&gt;eine Tabelle aus der Datenbank wird zu einem WFS-Layer&lt;/a&gt;, der mit einem &lt;code&gt;GetFeature&lt;/code&gt;-Request heruntergeladen werden kann. Solche WFS-Server gibt es wie Sand am Mehr (&lt;a href=&quot;http://geoserver.org/&quot;&gt;GeoServer&lt;/a&gt;, &lt;a href=&quot;http://hub.qgis.org/projects/quantum-gis/wiki/qgis_server_tutorial&quot;&gt;QGIS Server&lt;/a&gt;, &lt;a href=&quot;http://mapserver.org/&quot;&gt;MapServer/TinyOWS&lt;/a&gt;, &lt;a href=&quot;http://www.deegree.org/&quot;&gt;deegree&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Unterstützung in den Desktop-GIS wie z.B. &lt;a href=&quot;http://www.qgis.org&quot;&gt;QGIS&lt;/a&gt; ist auf den ersten Blick nicht allzu übel. Unterstützt wird die Version 1.0.0. Das Einbinden von WFS-Layer ist einfach und ähnlich dem eines Postgis-Layers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;//www.youtube.com/embed/hgPlv4tUDGE?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Im Video wird gezeigt, wie die Hoheitsgrenzen des Kantons Solothurn in QGIS geladen werden. &amp;laquo;In QGIS geladen&amp;raquo; bedeutet, dass die Vektordaten komplett vom WFS-Server heruntergeladen werden und in QGIS in einem Memory-Layer gespeichert werden. Wird QGIS geschlossen, werden die Daten nirgends auf dem Computer gespeichert und beim Öffnen des QGIS-Projektes werden die Daten vom WFS-Server &lt;em&gt;erneut&lt;/em&gt; heruntergeladen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Soweit so gut. Die Hoheitsgrenzen werden zügig geladen. Es sind ja auch nur 110 Polygone. Auch das Nicht-Offline-Speichern und erneute Laden beim Öffnen des QGIS-Projektes hat was: So sind die Daten garantiert immer aktuell resp. entsprechen der Aktualität wie sie der Serviceprovider anbietet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Schauen wir uns die Bodenbedeckung der amtlichen Vermessung an. Das sind im Kanton Solothurn knapp 280&apos;000 Polygone:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;//www.youtube.com/embed/Neerm1dweZo?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wird der WFS-Layer genau gleich geladen wie die Hoheitsgrenzen wartet der Benutzer 1.5 Minuten auf die Antwort. Das QGIS Fenster ist blockiert und auf dem Server läuft in diesem Zeitraum ein Prozess mit 100% CPU-Auslastung. Wird z.B. QGIS-Server verwendet, läuft neben der eigentlichen Verarbeitung des WFS-Request (als FCGI-Prozess) auch noch Apache mit 20% CPU-Auslastung. Speichert man das QGIS-Projekt und öffnet es wieder, wird dieser Request wiederholt. Der Benutzer wartet also bei jedem Öffnen des Projektes einige Minuten. Mir noch nicht klar warum das Abfragen von einzelnen Features (mit dem Identify Features Tool) so lange dauert. Eventuell wird beim Memory-Layer kein Spatial-Index erzeugt und daher wirkt die Feature-Abfrage so käsig.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mit den Filterfunktionen kann der Problematik der langen Downloadzeit entgegen gewirkt werden. Einerseits kann nach Sachattributen (z.B. Gemeindenummer) gefiltert werden:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;//www.youtube.com/embed/aAcTHfnoKlc?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Man darf aber nicht vergessen, dass man ja nur nach Attributen filtern kann, die auch da sind. Fehlt im WFS-Layer das Attribute &lt;code&gt;bfsnr&lt;/code&gt; kann &lt;strong&gt;nicht&lt;/strong&gt; nach einer Gemeinde gefiltert werden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anderseits kann man geografisch filtern:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;//www.youtube.com/embed/XbAWoqFtSVg?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Auch das geht nicht immer: WFS-Layer ohne Geometrien können &lt;strong&gt;nicht&lt;/strong&gt; geografisch gefiltert werden. An den Haaren herbeigezogen? Ich denke nicht. Denkbar sind Strassennamen oder ähnliches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;QGIS hat beim Hinzufügen von WFS-Layer eine interessante Option, die sich &amp;laquo;Cache Features&amp;raquo; nennt. Leider funktioniert sie mit der aktuellen QGIS-Version (2.10) nicht mehr. Im GUI ist die Option noch vorhanden aber die Funktion wurde im &lt;a href=&quot;https://github.com/qgis/QGIS/blob/master/src/providers/wfs/qgswfsprovider.cpp#L126&quot;&gt;Quellcode bewusst auskommentiert&lt;/a&gt;. Äh..? Irgendwie ist da sowieso der &lt;a href=&quot;http://lists.osgeo.org/pipermail/qgis-developer/2015-October/039642.html&quot;&gt;Wurm&lt;/a&gt; drin. Die Idee hinter &amp;laquo;Cache Features&amp;raquo; ist eben das oben beschriebene Verhalten, dh. &lt;strong&gt;alle&lt;/strong&gt; Features des WFS-Layer werden in QGIS &amp;laquo;gecached&amp;raquo;/heruntergeladen. Wählt man jetzt diese Option ab (in QGIS 1.8 funktioniert das noch), werden die Features nicht mehr in QGIS gecached, sondern es werden nur die Features heruntergeladen, die dem aktuellen Kartenausschnitt entsprechen. Der Funktion ist sogar ein Mindestmass an Intelligenz eingepflanzt. So werden die Features nicht erneut geladen, wenn der neue Kartenausschnitt (nach Zoomen) komplett innerhalb des vorangegangenen Kartenausschnittes ist. Auf den ersten Blick ist das genau das Verhalten, das man sich eigentlich wünscht. Die Probleme beginnen aber beim Herauszoomen und am Schluss lädt es bei jedem Verschieben der Karte sehr lange, sehr viele Features herunter:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;//www.youtube.com/embed/op7eWUm6wCI?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wie man aber auch sieht, funktioniert dieser &lt;em&gt;uncached&lt;/em&gt; WFS-Layer bei grossen Massstäben (und dementensprechend wenig Feature, die nachgeladen werden müssen) ziemlich gut. Bei genügend schneller Internetverbindung merkt man das Nachladen praktisch gar nicht.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nach all den Beispielen bleiben bei mir immer noch Fragen in den eingangs erwähnten Themenfeldern:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Darf das Herunterladen der Daten länger dauern oder soll der Benutzer die gleiche &lt;em&gt;User Experience&lt;/em&gt; wie bei WMS haben? Bei kleinen Datenmengen scheint das ziemlich gut zu funktionieren. Bei grösseren überhaupt nicht mehr. Oder macht es eben nichts, wenn die Daten nicht mehr &lt;em&gt;instant&lt;/em&gt; erscheinen, sondern es etliche Sekunden oder Minuten geht bis man wieder weiterarbeiten kann? Darf es Ziel der ganzen Übung sein die Daten einmalig herunterzuladen und dann lokal physisch zu speichern (als Shapefile o.ä.)? Ganz quer ist dieser Gedanke nicht: GML ist ja kein Produktionsformat, sondern ein Datenaustauschformat. Aber dann verliert man die Vorteile eines Direktzugriffsverfahrens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Klar, es gibt &lt;a href=&quot;http://www.opengeospatial.org/standards/filter&quot;&gt;Filter&lt;/a&gt;. Darf man aber erwarten, dass der Benutzer &lt;em&gt;immer&lt;/em&gt; vorgängig die richtigen Filter kennt und auch einstellt? Zudem kann nur nach etwas gefiltert werden, was auch in den Daten vorhanden ist (&amp;laquo;Ich will Daten der Gemeinde XY, kann aber keine Gemeindenummer beim Filter auswählen.&amp;laquo;). Einmal Filter nicht gesetzt und schon dauert ein Download sehr lange und generiert Last.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last: Die grossen WFS-Requests erzeugen eine hohe Last auf dem Server. Ich bin zwar keine Server-Admin-Guru aber ich glaube nicht, dass man von externen und unter Umständen unbekannten Leuten den Server unbewusst (Filter vergessen?) so einfach unter Volllast gesetzt bekommen will. Für GeoServer gibt es ein &lt;a href=&quot;http://docs.geoserver.org/stable/en/user/extensions/controlflow/index.html&quot;&gt;Control Flow Modul&lt;/a&gt;, das die OWS-Requests detailliert kontrollieren kann. Bei QGIS-Server (FCGI-Process) kann/man/will man das wahrscheinlich teilweise direkt in den FCGI-Einstellungen regeln. Häufig gibt es auch die Möglichkeit auf der Serverseite die maximale Anzahl der Features zu limitieren, die auf eine Anfrage eines Klienten zurückgeschickt werden. Bis zur WFS-Version 2.0.0 wurde diese Anzahl dem Klienten nicht bekannt gegeben. Der Klient wusste also nicht, ob er alle angeforderten Features bekommen hat oder ob der Server die maximale Anzahl der auszuliefernden Features bereits erreicht hat. In WFS 2.0.0 wird diese Anzahl als &lt;code&gt;CountDefault&lt;/code&gt; im &lt;code&gt;GetCapabilities&lt;/code&gt;-Dokument stehen. In Kombinination mit &lt;a href=&quot;http://gis.stackexchange.com/questions/86755/how-to-use-paging-in-a-wfs-query&quot;&gt;Paging&lt;/a&gt; &lt;a href=&quot;https://trac.osgeo.org/mapserver/ticket/2799&quot;&gt;wären&lt;/a&gt; so zumindest sehr grosse Downloads möglich mit der Sicherheit wirklich auch alle Features zu bekommen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ist WFS also nur etwas für kleine Datenmengen? Oder aber hat jemand Antworten auf die Frage: Wie soll man WFS &amp;laquo;richtig&amp;raquo; nutzen?&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Bezugsrahmenwechsel: ST_Fineltra in Action</title>
      <link>http://www.sogeo.services/blog/2015/10/04/bezugsrahmenwechsel-st-fineltra-in-action.html</link>
      <pubDate>Sun, 4 Oct 2015 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2015/10/04/bezugsrahmenwechsel-st-fineltra-in-action.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sandro Santilli hat eine &lt;a href=&quot;https://github.com/strk/fineltra)&quot;&gt;erste Version&lt;/a&gt; der &lt;a href=&quot;http://sogeo.ch/blog/2015/09/17/bezugsrahmenwechsel-postgis-to-the-rescue/&quot;&gt;ST_Fineltra Funktion&lt;/a&gt; für PostGIS zum Testen freigegeben. Um die Funktion verwenden zu können, sind zwei Schritte notwendig:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Installieren der neuen Funktion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Importieren der Dreiecksvermaschung in die Datenbank&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Installieren der Funktion funktioniert unter Ubuntu 14.04 problemlos. Hat man sowieso bereits die üblichen &quot;GIS-Tools&quot; (PostgreSQL/Postgis, gdal/ogr etc.) installiert, fehlt anscheinend nur das dev-Paket von &lt;em&gt;liblwgeom&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;sudo apt-get install liblwgeom-dev&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anschliessend kann gemäss der Installationsanleitung im &lt;a href=&quot;https://github.com/strk/fineltra/blob/master/README.md&quot;&gt;README&lt;/a&gt; vorgegangen werden:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;git clone https://github.com/strk/fineltra.git
cd fineltra
./autogen.sh
./configure
make
sudo make install&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Funktion ist eine PostgreSQL-Extension und kann für die gewünschte Datenbank aktiviert werden:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;sudo -u postgres psql -d xanadu2 -c &amp;quot;CREATE EXTENSION fineltra;&amp;quot;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der zweite Schritt ist der Import der Dreiecksvermaschung. Eine Spatialite-Datei mit einer Tabelle mit sämtlichen Dreiecken in beiden Bezugsrahmen gibts &lt;a href=&quot;https://www.dropbox.com/s/63lm992uypbol3m/chenyx06.sqlite?dl=0&quot;&gt;hier&lt;/a&gt;. Vor Jahren habe ich diese aus den Shapedateien von Swisstopo erstellt. Der Import in die Datenbank ist ein einfacher ogr2ogr-Befehl. Leider scheint das mit einer Version kleiner 2.0 nicht wirklich gut zu funktionieren, weil die Tabelle zwei Geometriespalten aufweist. Bei mir werden nur die Sachattribute importiert. Mit ogr2ogr &amp;gt;= 2.0 reicht aber folgender Befehl:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;ogr2ogr -f &amp;quot;PostgreSQL&amp;quot; PG:&amp;quot;dbname=&apos;xanadu2&apos; host=&apos;localhost&apos; port=&apos;5432&apos; user=&apos;stefan&apos; password=&apos;ziegler12&apos;&amp;quot; chenyx06.sqlite chenyx06 -lco SCHEMA=av_chenyx06 -nln chenyx06_triangles&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Tabelle mit den Dreiecken &lt;strong&gt;muss&lt;/strong&gt; beide Bezugsrahmen beinhalten. Es ist &lt;strong&gt;nicht&lt;/strong&gt; möglich die Funktion &lt;code&gt;ST_Fineltra&lt;/code&gt; mit Dreiecksgeometrien aus verschiedenen Tabelle zu bedienen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Schema &lt;code&gt;av_chenyx06&lt;/code&gt; muss bereits existieren. Ansonsten muss es manuell angelegt werden:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;sudo -u postgres psql -d xanadu2 -c &amp;quot;CREATE SCHEMA av_chenyx06 AUTHORIZATION stefan;&amp;quot;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Es ist unbedingt darauf zu achten, dass die Geometrietabellen einen Geometrieindex aufweisen. Bei mir werden diese beim Import mit ogr2ogr automatisch erzeugt. Falls dies nicht der Fall ist:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;sudo -u postgres psql -d xanadu2 -c &amp;quot;CREATE INDEX ON av_chenyx06.chenyx06_triangles USING GiST (the_geom_lv03);&amp;quot;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hat das geklappt, kann es ans Testen gehen. Die Syntax ist sowohl im &lt;a href=&quot;https://github.com/strk/fineltra/blob/master/README.md&quot;&gt;README&lt;/a&gt; wie auch im &lt;a href=&quot;http://sogeo.ch/blog/2015/09/17/bezugsrahmenwechsel-postgis-to-the-rescue/&quot;&gt;vorangegangen Beitrag&lt;/a&gt; erläutert.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/brw_st_fineltra_in_action/pgadmin_600_200.png&quot; alt=&quot;st_fineltra bsp 1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok, das ist jetzt noch keine Wissenschaft. Aber es scheint zu funktionieren. Die erste Frage muss aber sein: &amp;laquo;Stimmt die Transformation überhaupt?&amp;raquo; Um dies zu beantworten, vergleichen wir die Resultate aus zwei unabhängigen Transformationen. Einmal transformieren wir einen Testdatensatz mit der neuen &lt;code&gt;ST_Fineltra&lt;/code&gt;-Funktion und einmal mit einem &lt;a href=&quot;http://www.swisstopo.admin.ch/internet/swisstopo/en/home/products/software/products/m2m/lv03tolv95.html&quot;&gt;offiziellen Transformationsdienst&lt;/a&gt; der Swisstopo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Diesen Vergleich können wir auch innerhalb der Datenbank machen. Dazu verwenden wir die &lt;a href=&quot;https://github.com/pramsey/pgsql-http&quot;&gt;PostgreSQL-Extension &lt;code&gt;http&lt;/code&gt;&lt;/a&gt;. Mit dieser Extension wird PostgreSQL zu einem HTTP-Client. Bevor man das jetzt produktiv wirklich nutzen will, sollte man unbedingt das &lt;a href=&quot;https://github.com/pramsey/pgsql-http/blob/master/README.md#why-this-is-a-bad-idea&quot;&gt;Kapitel &quot;Why This is a Bad Idea&quot;&lt;/a&gt; im README lesen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Installation ist simpel:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;git clone https://github.com/pramsey/pgsql-http.git
cd pgsql-http
make
sudo make install&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Und anschliessend:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;sudo -u postgres psql -d xanadu2 -c &amp;quot;CREATE EXTENSION http;&amp;quot;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ein Testaufruf zeigt folgendes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/brw_st_fineltra_in_action/http_lv03tolv95.png&quot; alt=&quot;http test 1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mit den &lt;a href=&quot;http://www.postgresql.org/docs/9.3/static/functions-json.html&quot;&gt;JSON-Funktionen&lt;/a&gt; von PostgreSQL kann man einfach auf die einzelnen Rückgabewerte zugreifen. Als Testdatensatz wählen wir die Fixpunkte aus der amtlichen Vermessung. Weil jetzt für jeden Fixpunkt ein HTTP-GET-Request gemacht wird, dauert das ein Weilchen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;WITH fineltra &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; (
  &lt;span class=&quot;class&quot;&gt;SELECT&lt;/span&gt; nummer, nbident,
    ST_X(wkb_geometry) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; x_lv03, ST_Y(wkb_geometry) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; y_lv03,
    ST_X((ST_Fineltra(wkb_geometry, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;av_chenyx06.chenyx06_triangles&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;the_geom_lv03&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;the_geom_lv95&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;))) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; x_lv95_pg,
    ST_Y((ST_Fineltra(wkb_geometry, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;av_chenyx06.chenyx06_triangles&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;the_geom_lv03&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;the_geom_lv95&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;))) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; y_lv95_pg
  &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; av_avdpool_test.fixpunktekategorie__lfp
  &lt;span class=&quot;comment&quot;&gt;--WHERE fid = 3515717&lt;/span&gt;
  LIMIT &lt;span class=&quot;integer&quot;&gt;100&lt;/span&gt;
),
swisstopo &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; (
  &lt;span class=&quot;class&quot;&gt;SELECT&lt;/span&gt; nummer, nbident, x_lv95_pg, y_lv95_pg,
   &lt;span class=&quot;predefined&quot;&gt;cast&lt;/span&gt;(content::json-&amp;gt;&amp;gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;easting&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;double&lt;/span&gt; precision) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; x_lv95_lt,
   &lt;span class=&quot;predefined&quot;&gt;cast&lt;/span&gt;(content::json-&amp;gt;&amp;gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;northing&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;double&lt;/span&gt; precision) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; y_lv95_lt
  &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; fineltra &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f, http_get(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://geodesy.geo.admin.ch/reframe/lv03tolv95?easting=&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt; || f.x_lv03 || &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;&amp;amp;northing=&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt; || f.y_lv03 || &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;&amp;amp;format=json&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;)
)
&lt;span class=&quot;class&quot;&gt;SELECT&lt;/span&gt; nummer, nbident, (x_lv95_pg - x_lv95_lt)*&lt;span class=&quot;integer&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; x_diff_mm, (y_lv95_pg - y_lv95_lt)*&lt;span class=&quot;integer&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; y_diff_mm
&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; swisstopo;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Resultat sieht vielversprechend aus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/brw_st_fineltra_in_action/http_lv03tolv95_diff.png&quot; alt=&quot;swisstopo vs. st_fineltra&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Differenzen bewegen sich also in einem völlig irrelevanten Bereich. Um sicher zu sein, müssen auch noch weitere Geometrietypen (Linien und Polygone) überprüft werden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Zu guter Letzt soll die Performanz getestet werden. Dazu werden alle Tabellen der amtlichen Vermessung des Kantons Solothurn in einem MOpublic-ähnlichen Datenmodell in die Datenbank importiert. Eine GeoPackage-Datei des gesamten Kantons kann &lt;a href=&quot;http://www.catais.org/geodaten/ch/so/agi/av/mopublic/gpkg/lv03/d/kanton.gpkg&quot;&gt;hier&lt;/a&gt; heruntergeladen und mit folgendem ogr2ogr-Befehl in die Datenbank importiert werden:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;ogr2ogr -f &amp;quot;PostgreSQL&amp;quot; PG:&amp;quot;dbname=&apos;xanadu2&apos; host=&apos;localhost&apos; port=&apos;5432&apos; user=&apos;stefan&apos; password=&apos;ziegler12&apos;&amp;quot; -lco SCHEMA=av_avdpool_test kanton.gpkg&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In das Schema &lt;code&gt;av_avdpool_test&lt;/code&gt; wurden 33 Tabellen importiert. Alle im Bezugrahmen LV03:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/brw_st_fineltra_in_action/pgadmin_mopublic_lv03_yellow.png&quot; alt=&quot;mopublic lv03&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In einem Groovy-Skript reicht jetzt eigentlich eine einzige For-Schleife. Aus der View &lt;code&gt;geometry_columns&lt;/code&gt; werden alle zu transformierenden Tabellen identifiziert und diese transformiert:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
47
48
49
&lt;strong&gt;50&lt;/strong&gt;
51
52
53
54
55
56
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;annotation&quot;&gt;@Grapes&lt;/span&gt;([
   &lt;span class=&quot;annotation&quot;&gt;@Grab&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.postgresql:postgresql:9.4-1201-jdbc41&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;),
   &lt;span class=&quot;annotation&quot;&gt;@GrabConfig&lt;/span&gt;(systemClassLoader = &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;)
])

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;groovy.sql.*&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; dbhost = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; dbport = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;5432&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; dbdatabase = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;xanadu2&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; dbusr = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;stefan&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; dbpwd = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ziegler12&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; dbschema = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;av_avdpool_test&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; dburl = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;jdbc:postgresql://&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;dbhost&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;dbport&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;dbdatabase&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;?user=&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;dbusr&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;&amp;amp;password=&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;dbpwd&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; query = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;SELECT f_table_schema, f_table_name, f_geometry_column, coord_dimension, srid, type &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; +
  &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; FROM geometry_columns &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; +
  &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; WHERE f_table_schema = &apos;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;dbschema&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; +
  &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; AND srid = 21781;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; sql = Sql.newInstance(dburl)

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; startTime = &lt;span class=&quot;predefined-type&quot;&gt;Calendar&lt;/span&gt;.instance.time
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; endTime
println &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Start: &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;startTime&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

sql.withTransaction {
  sql.eachRow(query) {row -&amp;gt;
    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; tableName = row.f_table_name
    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; geomColumn = row.f_geometry_column

    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; geomType = row.type
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (row.coord_dimension == &lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;) {
      geomType += &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;
    }

    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; alterQuery = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ALTER TABLE &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(dbschema)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(tableName)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; +
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; ALTER COLUMN &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(geomColumn)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; TYPE geometry(&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(geomType)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,2056)&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; +
      &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; USING ST_Fineltra(&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(geomColumn)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;, &apos;av_chenyx06.chenyx06_triangles&apos;, &apos;the_geom_lv03&apos;, &apos;the_geom_lv95&apos;);&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

    println &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;--- &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;dbschema&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;$&lt;/span&gt;tableName&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; ---&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    sql.execute(alterQuery)

    endTime = &lt;span class=&quot;predefined-type&quot;&gt;Calendar&lt;/span&gt;.instance.time
    println &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Elapsed time: &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;(endTime.time - startTime.time)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; ms&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

  }
}

endTime = &lt;span class=&quot;predefined-type&quot;&gt;Calendar&lt;/span&gt;.instance.time
println &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;End: &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;endTime&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
println &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Total elapsed time: &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;(endTime.time - startTime.time)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; ms&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

sql.connection.close()
sql.close()&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Transformation einer Datenbanktabelle ist die Query in den Zeilen 38 - 40. Dies ist der einfachst mögliche Fall. Gibt es aber &lt;code&gt;Rules&lt;/code&gt; und/oder &lt;code&gt;Triggers&lt;/code&gt; etc. in der Tabelle, müssen diese wahrscheinlich vorher ausgeschaltet und nach der Transformation eingeschaltet werden. Das genaue Vorgehen muss geprüft werden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die gleichen 33 Tabellen liegen nun im Bezugsrahmen LV95 vor:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/brw_st_fineltra_in_action/pgadmin_mopublic_lv95_yellow.png&quot; alt=&quot;mopublic lv03 nach transformation&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Geschwindigkeit ist verblüffend: Für sämtliche Tabellen braucht das Skript bloss circa 140 Sekunden. Die Transformation der  Bodenbedeckung mit circa 280&apos;000 Polygonen dauert nur 25 Sekunden (Ubuntu 14.04 in einer VirtualBox auf einem 2jährigen iMac mit SSD).&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Interlis leicht gemacht #5</title>
      <link>http://www.sogeo.services/blog/2015/10/03/interlis-leicht-gemacht-number-5.html</link>
      <pubDate>Sat, 3 Oct 2015 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2015/10/03/interlis-leicht-gemacht-number-5.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overlaps in INTERLIS. Eine leidige Geschichte. Im &lt;a href=&quot;http://www.interlis.ch/interlis2/docs23/ili2-refman_2006-04-13_d.pdf&quot;&gt;Referenzhandbuch&lt;/a&gt; ist auf den Seiten 49 und 50 beschrieben was erlaubt ist. Fairerweise muss man erwähnen, dass das Verbieten von Overlaps im INTERLIS-Modell das Problem aber trotzdem nicht lösen würde. Möglich blieben Overlaps (aka Self-Intersections) aus rein numerischen Gründen. Hier die erläuternde Skizze aus dem Handbuch ((c) by KOGIS, CH-3084-Wabern, &lt;a href=&quot;http://www.kogis.ch&quot;&gt;www.kogis.ch&lt;/a&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p5/ili_handbuch_overlaps.png&quot; alt=&quot;INTERLIS Overlaps Referenzhandbuch&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Problem mit Overlaps ist, dass Geometrien mit solchen im OGC Simple Feature Universum &lt;a href=&quot;http://www.postgis.net/docs/ST_IsValid.html&quot;&gt;nicht gültig&lt;/a&gt; sind und beim Prozessieren für nicht zuverlässige Resultate sorgen oder auch zu gar keinen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Solche Overlaps sind unter anderem häufig in der amtlichen Vermessung bei Einlenkern anzutreffen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p5/einlenker_gbplan.png&quot; alt=&quot;Einlenker mit Overlap Overview&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Soweit sieht das ganz gut aus. Um das Ganze übersichtlicher zu gestalten, lassen wir alles weg, was nicht Liegenchaften sind und markieren die Stützpunkte. Die grünen Quadrate kennzeichnen die Linienstützpunkte &lt;code&gt;LIPT&lt;/code&gt; und die blauen Kreise die Bogenstützpunkte &lt;code&gt;ARCP&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p5/einlenker_intersection_circle.png&quot; alt=&quot;Einlenker mit Overlap Overview - no frills&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sieht eigentlich immer noch gut aus. Zoomt man jetzt aber beim rechten Einlenker (roter Kreis) stark rein, wird die Self-Intersection sichtbar. Eine der beiden Linien ist rot eingefärbt, um das Kreuzen (= Self-Intersection = Overlap) der Linien besser sichtbar zu machen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p5/einlenker_intersection_zoom.png&quot; alt=&quot;Einlenker mit Overlap Zoom&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wie ging man bis anhin mit diesem Problem um? Eine Variante ist die einzelnen Linienstücke während des INTERLIS-Importes neu zu verknoten. Dort wo sich die Linien kreuzen wird ein neuer Stützpunkt gerechnet und anschliessend wird polygoniert. Dabei entsteht ein klitzekleines Polygon. Für den Umgang mit diesem Polygon gibts wiederum ein paar Varianten:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Es wird gelöscht. Unschön, da jetzt eine Lücke im Datensatz entsteht (bei Areas).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Es wird dem &amp;laquo;Ursprungs&amp;raquo;-Polygon zugewiesen. Unschön, da jetzt ein Multipolygon entsteht resp. entstehen muss. Das INTERLIS-Datenmodell sieht aber unter Umständen keine Multipolygone vor (Constraints in der Datenbank lassen grüssen).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Es wird dem Nachbarpolygon mit der längsten gemeinsamen Kanten zugewiesen. Unschön, da jetzt der Endpunkt des &amp;laquo;Ursprungs&amp;raquo;-Polygons nicht mehr am &amp;laquo;Ursprungs&amp;raquo;-Endpunkt zu liegen kommt. In der amtlichen Vermessung würde das bedeuten, dass auf diesem Stützpunkt des Polygons kein Grenzpunkt liegt obwohl doch eigentlich einer da sein sollte.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In der neusten Version von &lt;a href=&quot;http://www.eisenhutinformatik.ch/interlis/ili2pg/&quot;&gt;ili2pg&lt;/a&gt; wurde eine bessere Variante implementiert. Um die Topologie (wenn man das so nennen darf) resp. die Nachbarschaftsbeziehungen zwischen den Polygonen besser einzuhalten wird auf dem Kreisbogen in genügend grossem Abstand (abhängig vom erlaubten OVERLAP-Wert im INTERLIS-Datenmodell) von der tangential zulaufenden Gerade ein neuer Stützpunkt gerechnet. Von diesem neuen Stützpunkt wird anschliessend ein kleines Geradenstück bis zum Endpunkt gezogen. Vielleicht sagt ein Bild mehr als 1&apos;000 komplizierte Worte:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p5/einlenker_ili2pg_zoom.png&quot; alt=&quot;Einlenker bereinigt zoom&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rausgezoomt wird die neue Situation nochmals deutlicher sichtbar:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p5/einlenker_ili2pg.png&quot; alt=&quot;Einlenker bereinigt Overview&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Teil dieses Weiterentwicklungspaketes von ili2pg war ebenfalls die Unterstützung der Flächenbildung unter Beibehaltung der Kreisbogengeometrien. Diese werden neu nicht mehr segmentiert, sondern das Resultat eines INTERLIS1-Importes in die Postgis-Datenbank sind Geometrien vom Typ &lt;code&gt;COMPOUNDCURVE&lt;/code&gt; und &lt;code&gt;CURVEPOLYGON&lt;/code&gt;. Mit dem Programmparameter &lt;code&gt;--strokeArcs&lt;/code&gt; können Kreisbogen weiterhin segmentiert werden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Diese Weiterentwicklungen wurden finanziell unterstützt durch die Kantone &lt;a href=&quot;http://www.be.ch/agi&quot;&gt;Bern&lt;/a&gt;, &lt;a href=&quot;http://geo.gl.ch/&quot;&gt;Glarus&lt;/a&gt; und &lt;a href=&quot;http://www.agi.so.ch&quot;&gt;Solothurn&lt;/a&gt; und durch die Firma &lt;a href=&quot;http://www.eisenhutinformatik.ch/&quot;&gt;Eisenhut Informatik AG&lt;/a&gt; ausgeführt. Besten Dank!&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Bezugsrahmenwechsel: PostGIS to the rescue</title>
      <link>http://www.sogeo.services/blog/2015/09/17/bezugsrahmenwechsel-postgis-to-the-rescue.html</link>
      <pubDate>Thu, 17 Sep 2015 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2015/09/17/bezugsrahmenwechsel-postgis-to-the-rescue.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gute Mitarbeiter mit guten Ideen. Was dabei rauskommt? Die PostgreSQL-Funktion &lt;code&gt;ST_Fineltra&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wie wahrscheinlich viele andere Kantone auch wollten wir mit &lt;a href=&quot;http://www.safe.com/&quot;&gt;FME&lt;/a&gt; und dem &lt;a href=&quot;http://www.swisstopo.admin.ch/internet/swisstopo/de/home/products/software/products/reframe_fme.html&quot;&gt;REFRAME-Plugin&lt;/a&gt; die Daten in unserer PostgreSQL-Datenbank transformieren. Das funktioniert und ist genügend schnell. So richtig glücklich wurden wir aber nicht damit:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Warum sollen wir Daten mit einer Drittapplikation ausserhalb der Datenbank transformieren, um sie dann wieder in der Datenbank zu speichern? Wenn ich mit &lt;code&gt;ST_Transform&lt;/code&gt; Daten in ein anderes Koordinatensystem transformiere, muss ich das ja auch nicht machen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In einer Übergangsphase müssen wir wohl oder über die Flexibilität und Fähigkeit besitzen Daten in beiden Bezugsrahmen anbieten und verwalten zu können. Für diese Aufgaben will/kann ich nicht immer gleich FME anschmeissen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wir hatten mit FME Probleme bei Tabellen, die mehrere Geometrieattribute aufweisen. War alles machbar, wirkte aber hakelig.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Warum also nicht ein Funktion à la &lt;code&gt;ST_Transform&lt;/code&gt;, die es ermöglicht die Daten mit der offiziellen &lt;a href=&quot;http://www.swisstopo.admin.ch/internet/swisstopo/de/home/topics/survey/lv95/lv03-lv95/chenyx06.html&quot;&gt;Dreiecksvermaschung&lt;/a&gt; zu transformieren? &lt;code&gt;ST_Fineltra&lt;/code&gt; war geboren. Ende Oktober sollte die Funktion als &lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/extend-extensions.html&quot;&gt;PostgreSQL-Extension&lt;/a&gt; verfügbar sein.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Bodenbedeckung der amtlichen Vermessung mit &lt;code&gt;ST_Fineltra&lt;/code&gt; transformieren?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;class&quot;&gt;UPDATE&lt;/span&gt; bodenbedeckung_boflaeche
  &lt;span class=&quot;class&quot;&gt;SET&lt;/span&gt; geometrie_lv95 = ST_Fineltra(geometrie_lv03, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;chenyx06&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;geom_lv03&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;geom_lv95&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;);&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;geometrie&lt;/strong&gt;: Die zu transformierende Geometrie.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;chenyx06&lt;/strong&gt;: Der Namen der Tabelle mit der Dreiecksvermaschung. Es wird also möglich sein die Funktion mit eigenen Dreiecksvermaschungen (z.B. für lokale Entzerrungen) zu verwenden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;geom_lv03&lt;/strong&gt;: Attributname der Dreiecksdefinitionen (in der Dreiecksvermaschungstabelle) im Ausgangsbezugsrahmen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;geom_lv95&lt;/strong&gt;: Attributname der Dreiecksdefinitionen (in der Dreiecksvermaschungstabelle) im Zielbezugsrahmen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die UPDATE-Query hat den Schönheitsfehler, dass es jetzt zwei Geometrieattribute in der Tabelle gibt. Dies wollen wir vermeiden und die LV03-Geometrie in eine LV95-Geometrie transformieren. Mit folgender schicken Query ist das kein Problem:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;class&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;TABLE&lt;/span&gt; bodenbedeckung_boflaeche
  &lt;span class=&quot;class&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;COLUMN&lt;/span&gt; geometrie TYPE geometry(Polygon,&lt;span class=&quot;integer&quot;&gt;2056&lt;/span&gt;)
    &lt;span class=&quot;keyword&quot;&gt;USING&lt;/span&gt; ST_Fineltra(geometrie, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;chenyx06&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;geom_lv03&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;geom_lv95&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;);&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In der Datenbanksicht &lt;code&gt;geometry_columns&lt;/code&gt; sind alle notwendigen Informationen dazu vorhanden. Mit einem kleinen Skript und einer For-Schleife lassen sich jetzt alle Tabellen transformieren. In PostGIS &amp;lt; 2.0 ist &lt;code&gt;geometry_columns&lt;/code&gt; keine Sicht, sondern eine Tabelle, die manuell nachgeführt werden muss. Entweder ist die sauber und vollständig nachführt oder man muss sich die Informationen aus den verschiedenen &lt;code&gt;pg_*&lt;/code&gt;-Tabellen zusammen suchen, was die Komplexität des Skriptes natürlich erhöht. Ebenfalls muss an anfällige Triggers und Rules gedacht werden. Diese sollten vor der Transformation ausgeschaltet und anschliessend wieder eingeschaltet werden. Informationen dazu können ebenfalls aus den &lt;code&gt;pg_*&lt;/code&gt;-Tabellen geholt werden.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Interlis leicht gemacht #4</title>
      <link>http://www.sogeo.services/blog/2015/08/30/interlis-leicht-gemacht-number-4.html</link>
      <pubDate>Sun, 30 Aug 2015 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2015/08/30/interlis-leicht-gemacht-number-4.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wir sind momentan dabei im Kanton Solothurn die &lt;a href=&quot;http://models.geo.admin.ch/BJ/KS3-20060703.ili&quot;&gt;AVGBS&lt;/a&gt; einzuführen. In einem Pilotprojekt sollen verschiedene Geschäftsfälle durchgespielt werden. Dafür müssen in der amtlichen Vermessung die Grundstücke das Attribut &amp;laquo;EGRIS_EGRID&amp;raquo; führen. Im Grundbuch wird der EGRID bereits geführt. Eine Liste aller Grundstücke (inkl. EGRID) kann vom Grundbuch als CSV-Datei exportiert werden. Die Frage lautet also nun: Wie kommen die EGRID aus dem Grundbuch in die amtliche Vermessung beim Nachführungsgeometer?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eine Variante ist das manuelle Abfüllen des EGRID im AV-Erfassungssystem. Bei fast 2000 Grundstücken in der Pilotgemeinde macht das wenig Spass, ist fehleranfällig und wird ewig dauern. Mmmmh, es geht hier doch um AVGBS. Warum erstellen wir nicht eine AVGBS-Datei, die der Nachführungsgeometer in seinem System einlesen kann? Gesagt, getan. Mit einem kleinen &lt;a href=&quot;http://www.groovy-lang.org/&quot;&gt;Groovy&lt;/a&gt;-Skript und &lt;a href=&quot;http://www.eisenhutinformatik.ch/interlis/ili2pg/&quot;&gt;ili2pg&lt;/a&gt; wird das TOPIC &lt;code&gt;Eigentumsverhaeltnis&lt;/code&gt; mit der CLASS &lt;code&gt;Grundstueck&lt;/code&gt; erstellt, abgefüllt und anschliessend in einer INTERLIS-Datei dem Nachführungsgeometer zur Verfügung gestellt. Dieser kann die INTERLIS-Datei einlesen und der EGRID wird den Grundstücken in seinem System zugewiesen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der komplette Prozess kann in vier Schritte unterteilt werden:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Erstellen der INTERLIS-Modellstruktur in der Datenbank&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Importieren der CSV-Datei mit den EGRID in die Datenbank&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Abfüllen der in Schritt (1) erstellten Tabellen mit den benötigten Informationen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exportieren der INTERLIS-Datei&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
47
48
49
&lt;strong&gt;50&lt;/strong&gt;
51
52
53
54
55
56
57
58
59
&lt;strong&gt;60&lt;/strong&gt;
61
62
63
64
65
66
67
68
69
&lt;strong&gt;70&lt;/strong&gt;
71
72
73
74
75
76
77
78
79
&lt;strong&gt;80&lt;/strong&gt;
81
82
83
84
85
86
87
88
89
&lt;strong&gt;90&lt;/strong&gt;
91
92
93
94
95
96
97
98
99
&lt;strong&gt;100&lt;/strong&gt;
101
102
103
104
105
106
107
108
109
&lt;strong&gt;110&lt;/strong&gt;
111
112
113
114
115
116
117
118
119
&lt;strong&gt;120&lt;/strong&gt;
121
122
123
124
125
126
127
128
129
&lt;strong&gt;130&lt;/strong&gt;
131
132
133
134
135
136
137
138
139
&lt;strong&gt;140&lt;/strong&gt;
141
142
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;annotation&quot;&gt;@Grapes&lt;/span&gt;([
   &lt;span class=&quot;annotation&quot;&gt;@GrabResolver&lt;/span&gt;(name=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;catais.org&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, root=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://www.catais.org/maven/repository/release/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, m2Compatible=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;),
   &lt;span class=&quot;annotation&quot;&gt;@Grab&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.postgresql:postgresql:9.4-1201-jdbc41&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;),
   &lt;span class=&quot;annotation&quot;&gt;@Grab&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ch.interlis:ili2c:4.5.12&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;),
   &lt;span class=&quot;annotation&quot;&gt;@Grab&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ch.interlis:ili2pg:2.1.4&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;),
   &lt;span class=&quot;annotation&quot;&gt;@GrabConfig&lt;/span&gt;(systemClassLoader = &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;)
])

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ch.ehi.ili2db.base.Ili2db&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ch.ehi.ili2db.base.Ili2dbException&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ch.ehi.ili2db.gui.Config&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ch.ehi.ili2pg.converter.PostgisGeometryConverter&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ch.ehi.sqlgen.generator_impl.jdbc.GeneratorPostgresql&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;groovy.sql.*&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; csv = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/Users/stefan/tmp/gb_egridexport150730_2407.csv&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; numberOfCsvRows = &lt;span class=&quot;integer&quot;&gt;3717&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; municipality = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;oensingen&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; fosnr = &lt;span class=&quot;integer&quot;&gt;2407&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; dbhost = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; dbport = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;5432&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; dbdatabase = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;xanadu2&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; dbusr = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;stefan&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; dbpwd = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ziegler12&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; dbschema = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;av_egrid&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; modelName = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;GB2AV&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; dburl = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;jdbc:postgresql://&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;dbhost&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;dbport&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;dbdatabase&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;?user=&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;dbusr&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;&amp;amp;password=&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;dbpwd&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;/*
* 1. Create empty database tables with ili2db.
*/&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; query = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;DROP SCHEMA IF EXISTS &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(dbschema)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; CASCADE;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; sql = Sql.newInstance(dburl)
sql.execute(query)

&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; config = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Config()
config.setDbhost(dbhost)
config.setDbdatabase(dbdatabase)
config.setDbport(dbport)
config.setDbusr(dbusr)
config.setDbpwd(dbpwd)
config.setDbschema(dbschema)
config.setDburl(dburl)

config.setModels(modelName);
config.setModeldir(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://models.geo.admin.ch/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

config.setGeometryConverter(PostgisGeometryConverter.class.getName())
config.setDdlGenerator(GeneratorPostgresql.class.getName())
config.setJdbcDriver(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.postgresql.Driver&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

config.setNameOptimization(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
config.setMaxSqlNameLength(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
config.setSqlNull(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;enable&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

config.setDefaultSrsAuthority(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;EPSG&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
config.setDefaultSrsCode(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;21781&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

Ili2db.runSchemaImport(config, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;comment&quot;&gt;/*
* 2. Create foreign table from CSV.
*/&lt;/span&gt;
query = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\
&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;DROP FOREIGN TABLE IF EXISTS &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(dbschema)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(municipality)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;;

CREATE FOREIGN TABLE &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(dbschema)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(municipality)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;  (
 bfsnr integer,
 kreisnr integer,
 grundstuecknummer varchar,
 grundstuecknummerzusatz varchar,
 grundstuecknummer3 varchar,
 grundstuecknummer4 varchar,
 egrid varchar(14)
) SERVER file_fdw_server
OPTIONS (format &apos;csv&apos;, header &apos;true&apos;,
         filename &apos;&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(csv)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;&apos;,
         delimiter &apos;,&apos;, null &apos;&apos;);
&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
sql.execute(query)

&lt;span class=&quot;comment&quot;&gt;// Check number of rows in foreign table.&lt;/span&gt;
query = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;SELECT count(*) FROM &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(dbschema)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(municipality)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; sql.firstRow(query).count == numberOfCsvRows

&lt;span class=&quot;comment&quot;&gt;/*
* 3. Assign EGRID values to cadastral data and insert data into ili2db tables.
*/&lt;/span&gt;
query = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\
&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;DELETE FROM &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(dbschema)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.eigentumsverhaeltnis_grundstueck;
DELETE FROM &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(dbschema)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.gb2av_grundstuecknummer;

WITH av AS (
 SELECT g.ogc_fid as av_id, g.nbident, g.nummer as av_nummer, l.flaechenmass, l.geometrie, l.gem_bfs, l.lieferdatum
 FROM av_avdpool_ch.liegenschaften_grundstueck as g, av_avdpool_ch.liegenschaften_liegenschaft as l
 WHERE g.gem_bfs = &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(fosnr)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;
 AND l.gem_bfs = &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(fosnr)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;
 AND g.tid = l.liegenschaft_von
),
gb AS (
 SELECT row_number() OVER () as gb_id, bfsnr, grundstuecknummer as gb_nummer, egrid
 FROM &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(dbschema)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(municipality)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;
 WHERE grundstuecknummerzusatz IS NULL
),
eigentumsverhaeltnis_grundstueck AS (
 INSERT INTO &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(dbschema)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.eigentumsverhaeltnis_grundstueck (t_id, art)
 SELECT gb_id, 0::integer as art
 FROM av, gb
 WHERE av.av_nummer = gb.gb_nummer
)
INSERT INTO &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(dbschema)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.gb2av_grundstuecknummer(t_id, t_seq, egrid, nummer, gb2aveigntmsvrhltnis_grundstueck_nummer)
SELECT (gb_id+1000000) as t_id, 0::integer as t_seq, gb.egrid, gb.gb_nummer, gb_id
FROM av, gb
WHERE av.av_nummer = gb.gb_nummer;
&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
sql.execute(query)

&lt;span class=&quot;comment&quot;&gt;// Check if we were able to assign an EGRID to all Liegenschaften from cadastral&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// survyeing. If this is true the number of objects in all three tables is equal.&lt;/span&gt;
query = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;SELECT count(*) FROM av_avdpool_ch.liegenschaften_liegenschaft WHERE gem_bfs = &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(fosnr)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; numberOfLiegenschaften = sql.firstRow(query).count

query = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;SELECT count(*) FROM &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(dbschema)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.eigentumsverhaeltnis_grundstueck;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; numberOfEigentumsverhaeltnisGrundstueck = sql.firstRow(query).count

query = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;SELECT count(*) FROM &lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;Sql.expand(dbschema)&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.gb2av_grundstuecknummer;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; numberOfGrundstuecknummer = sql.firstRow(query).count

&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; numberOfLiegenschaften == numberOfEigentumsverhaeltnisGrundstueck
&lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; numberOfLiegenschaften == numberOfGrundstuecknummer

&lt;span class=&quot;comment&quot;&gt;// Close database connection.&lt;/span&gt;
sql.connection.close()
sql.close()

&lt;span class=&quot;comment&quot;&gt;/*
* 4. Export data to an INTERLIS/XTF file.
*/&lt;/span&gt;
config.setXtffile(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/Users/stefan/tmp/egrid_&lt;/span&gt;&lt;span class=&quot;inline&quot;&gt;&lt;span class=&quot;inline-delimiter&quot;&gt;${&lt;/span&gt;municipality&lt;span class=&quot;inline-delimiter&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.xtf&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
Ili2db.runExport(config, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 34 - 61&lt;/strong&gt;: Im ersten Schritt wird das Schema, in dem die INTERLIS-Modellstruktur angelegt wird, gelöscht (falls es existiert). Anschliessend werden mit ili2pg die leeren Tabellen in der Datenbank angelegt. Mehr Informationen zu den Konfigurationsparametern gibts &lt;a href=&quot;http://sogeo.ch/blog/2015/06/09/interlis-leicht-gemacht-p2/&quot;&gt;hier&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 66 - 86&lt;/strong&gt;: Die Daten aus der CSV-Datei müssen in die Datenbank importiert werden, um anschliessend Abfragen durchführen zu können. Ein eleganter Weg die Daten zu importieren, ist die Verwendung eines &lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/file-fdw.html&quot;&gt;Foreign Data Wrappers&lt;/a&gt; für Textdateien. Die Kenntnis über die Struktur (also die Spalten der CSV-Datei und das verwendete Trennzeichen) reicht, um mit einem &lt;code&gt;CREATE FOREIGN TABLE&lt;/code&gt; die Daten zu &quot;importieren&quot;. Mit &lt;code&gt;assert&lt;/code&gt; wird geprüft, ob auch wirklich alles importiert wurde.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 91 - 136&lt;/strong&gt;: Anschliessend können mit SQL-Befehlen die AV-Daten mit den importierten Grundbuchdaten verknüpft werden und das gewünschte Ergebnis in die passenden Tabellen (aus Schritt 1) gespeichert werden. Verwendet werden &lt;a href=&quot;http://www.postgresql.org/docs/9.4/static/queries-with.html&quot;&gt;Common Table Expressions&lt;/a&gt;. Somit fallen die x-fach verschachtelten Subqueries weg.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aus dem TOPIC &lt;code&gt;Eigentumsverhaeltnis&lt;/code&gt; interessiert eigentlich nur die CLASS &lt;code&gt;Grundstueck&lt;/code&gt;. Die Klasse verwendet jedoch eine STRUCTURE, die in der relationalen Datenbank in einer weiteren Tabelle abgebildet wird. So müssen Daten in zwei Tabellen geschrieben werden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Auch hier überprüfen wir wieder auf Vollständigkeit: In beiden Tabellen, in die wir Daten geschrieben haben, müssen genau gleich viele Objekte vorhanden sein, wie in der Ausgangstabelle (Liegenschaften der amtlichen Vermessung).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die selbständigen und dauerenden Rechte fehlen in der Abfrage, können aber genau gleich behandelt werden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 141 - 142&lt;/strong&gt;: Zu guter Letzt exportieren wird unsere Arbeit in eine INTERLIS/XTF-Datei.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Log-Informationen des Exportprozesses sehen schon mal gut aus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p4/ili2pg_export_log.png&quot; alt=&quot;ili2pg export log&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ein kurzer Blick in die INTERLIS/XTF-Datei zeigt das gewünschte Resultat:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p4/egrid_xtf.png&quot; alt=&quot;egrid xtf&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Interlis leicht gemacht #3</title>
      <link>http://www.sogeo.services/blog/2015/08/09/interlis-leicht-gemacht-number-3.html</link>
      <pubDate>Sun, 9 Aug 2015 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2015/08/09/interlis-leicht-gemacht-number-3.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das GeoIG resp. die &lt;a href=&quot;https://www.admin.ch/opc/de/classified-compilation/20071088/index.html#a34&quot;&gt;GeoIV sieht Downloaddienste&lt;/a&gt; für Geobasisdaten vor. Kurzum heisst das, dass diese Geobasisdaten &lt;em&gt;dienstebasiert&lt;/em&gt; und &lt;em&gt;modellkonform&lt;/em&gt; zum Download bereitgestellt werden. Modellkonform bedeutet - sehr einfach ausgedrückt - entweder INTERLIS/XTF oder &lt;a href=&quot;http://www.ech.ch/vechweb/page?p=dossier&amp;amp;documentNumber=eCH-0118&quot;&gt;INTERLIS/GML&lt;/a&gt;. INTERLIS/GML hat den Vorteil, dass man es, im Gegensatz zu INTERLIS/XTF, sinnvoll mittels WFS bereitstellen kann. Dienstebasiert bedeutet, dass nicht bloss ein einfacher Downloadlink publiziert wird, sondern dass zusätzlich zum Link eine Serviceschicht darüber gestülpt wird.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gedanken über das modellkonforme Bereitstellen von Geodaten hat sich &lt;a href=&quot;http://inspire.ec.europa.eu/&quot;&gt;INSPIRE&lt;/a&gt; auch schon gemacht. Als Lösungen für Downloaddienste werden zwei Alternativen &lt;a href=&quot;http://inspire.ec.europa.eu/documents/Network_Services/Technical_Guidance_Download_Services_v3.1.pdf&quot;&gt;vorgeschlagen&lt;/a&gt;: WFS und Atom + OpenSearch (AtOS). Informationen zu Atom + OpenSearch findet man vor allem in &lt;a href=&quot;http://www.weichand.de/masterarbeit/Masterarbeit_Weichand.pdf&quot;&gt;zwei&lt;/a&gt; &lt;a href=&quot;https://www.geoportal.nrw.de/application-informationen/inspire/dokumente/images/Masterthesis_Rohrbach.pdf&quot;&gt;Masterarbeiten&lt;/a&gt;. Bei Atom + OpenSearch können die (Geo)daten dateibasiert und vordefiniert heruntergeladen werden. Um dem Servicegedanken gerecht zu werden und nicht bloss stupide HTTP-Links zu publizieren, muss noch eine Schicht drüber gelegt werden. Diese pflanzt dem Ganzen ein wenig Intelligenz ein.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Setzt man sich mit der modellkonformen Bereitstellung von Geodaten auseinander, darf man zum Schluss kommen, dass die Atom + OpenSearch Lösung einfacher und effizienter für eine GDI umsetzbar ist. Zudem schlägt man zwei Fliegen mit einer Klappe:  neben modellkonformen Daten können ebenfalls nicht-modellkonforme Daten und Rasterdaten mittels Atom + OpenSearch bereitgestellt werden können. WFS kann natürlich trotzdem eingesetzt werden. In diesem Fall aber nicht für die modellkonforme Bereitstellung. Die gerade eben diskutierten Datenflüsse lassen sich grob wie folgt darstellen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p3/gdi.png&quot; alt=&quot;GDI Datenbereitstellung&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Schema zeigt die beiden Schritte (1) &lt;em&gt;Datenumbau&lt;/em&gt; und (2) &lt;em&gt;Formatumbau&lt;/em&gt;. Der Datenumbau kann z.B. mit einem ETL-Werkzeug oder auch mit SQL-Befehlen durchgeführt werden. Für den Formatumbau eignet sich ja hervorragend &lt;a href=&quot;http://www.eisenhutinformatik.ch/interlis/ili2pg/&quot;&gt;ili2pg&lt;/a&gt;. Der Formatumbau bei der Variante WFS übernimmt der WFS-Server selbst. Nun könnte man zum Schluss kommen, dass die Variante AtOS weniger aktuell als die WFS-Variante ist: Der WFS greift live auf die Daten des MGDM-Topfs zu wohingegen bei AtOS die Datei z.B. einmal pro Tag mit ili2pg physisch produziert wird. Nun, dem ist nicht so. Eine elegante Lösung ist der Einsatz der ili2pg-Bibliotheken als &lt;a href=&quot;https://de.wikipedia.org/wiki/Servlet&quot;&gt;Servlet&lt;/a&gt;. Damit kann der Formatumbau erst beim Aufruf der URL, z.B. &lt;code&gt;&lt;a href=&quot;http://www.example.com/2583_schoenenwerd.xtf&quot; class=&quot;bare&quot;&gt;http://www.example.com/2583_schoenenwerd.xtf&lt;/a&gt;&lt;/code&gt;, ausgeführt werden. Als &lt;em&gt;Proof of Concept&lt;/em&gt; soll die amtliche Vermessung der Gemeinde Schönenwerd im Datenmodell &lt;a href=&quot;http://www.cadastre.ch/internet/kataster/de/home/manuel-av/service/mopublic.html&quot;&gt;MOpublic&lt;/a&gt; mittels Servlet erzeugt werden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Als erstes brauchen wir einen Servlet-Container. Anstelle von Java kann man auch - um ein paar Zeichen zu sparen - Groovy einsetzen und sich mit  &lt;a href=&quot;http://www.eclipse.org/jetty/&quot;&gt;Jetty&lt;/a&gt; was zusammenbasteln:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;doctype&quot;&gt;#!/usr/bin/env groovy&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.eclipse.jetty.server.Server&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.eclipse.jetty.servlet.*&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;groovy.servlet.*&lt;/span&gt;

&lt;span class=&quot;annotation&quot;&gt;@Grab&lt;/span&gt;(group=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.eclipse.jetty.aggregate&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, module=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;jetty-all&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, version=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;9.2.10.v20150310&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;startJetty&lt;/span&gt;() {
    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; server = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Server(&lt;span class=&quot;integer&quot;&gt;8080&lt;/span&gt;)
    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; handler = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ServletContextHandler(ServletContextHandler.SESSIONS)
    handler.contextPath = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;
    handler.resourceBase = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;
    handler.addServlet(IliExport, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/*&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;)

    server.handler = handler
    server.start()
    server.join()
}

println &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Starting Jetty, press Ctrl+C to stop.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
startJetty()&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Interessant sind wahrscheinlich folgende Zeilen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeile 7&lt;/strong&gt;: Groovy hat mit &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/documentation/grape.html&quot;&gt;Grape&lt;/a&gt; ein effizientes &lt;em&gt;Dependency Management&lt;/em&gt;. Fehlt die gewünschte Bibliothek auf dem System, wird sie einmalig heruntergeladen und gespeichert.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeile 13&lt;/strong&gt;: Hier teilen wir dem Server mit, dass bei allen Requests das Servlet &lt;code&gt;IliExport&lt;/code&gt; aufgerufen werden soll.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Formatumbau/Export-Servlet sieht dann wie folgt aus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
47
48
49
&lt;strong&gt;50&lt;/strong&gt;
51
52
53
54
55
56
57
58
59
&lt;strong&gt;60&lt;/strong&gt;
61
62
63
64
65
66
67
68
69
&lt;strong&gt;70&lt;/strong&gt;
71
72
73
74
75
76
77
78
79
&lt;strong&gt;80&lt;/strong&gt;
81
82
83
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;annotation&quot;&gt;@GrabConfig&lt;/span&gt;(systemClassLoader=&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;)
&lt;span class=&quot;annotation&quot;&gt;@GrabResolver&lt;/span&gt;(name=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;catais.org&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, root=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://www.catais.org/maven/repository/release/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, m2Compatible=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;annotation&quot;&gt;@Grab&lt;/span&gt;(group=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.postgresql&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, module=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;postgresql&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, version=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;9.4-1201-jdbc41&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;annotation&quot;&gt;@Grab&lt;/span&gt;(group=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ch.interlis&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, module=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ili2c&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, version=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;4.5.12&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;annotation&quot;&gt;@Grab&lt;/span&gt;(group=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ch.interlis&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, module=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ili2pg&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, version=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;2.1.4&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;javax.servlet.http.*&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;javax.servlet.*&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;groovy.servlet.ServletCategory&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ch.ehi.ili2db.base.Ili2db&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ch.ehi.ili2db.base.Ili2dbException&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ch.ehi.ili2db.gui.Config&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ch.ehi.ili2pg.converter.PostgisGeometryConverter&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ch.ehi.sqlgen.generator_impl.jdbc.GeneratorPostgresql&lt;/span&gt;

&lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;IliExport&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;extends&lt;/span&gt; HttpServlet {
    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; application

    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; init(ServletConfig config) {
        &lt;span class=&quot;local-variable&quot;&gt;super&lt;/span&gt;.init(config)
        application = config.servletContext
    }

    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; doGet(HttpServletRequest request, HttpServletResponse response) {
        &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; requestedFileName = request.getRequestURI() - &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;

        &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; mapping = [
        &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;2583_schoenenwerd.xtf&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;modelname&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;MOpublic03_ili2_v13&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;dbschema&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;av_mopublic_export&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;],
        &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;2583_schoenenwerd.gml&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;modelname&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;MOpublic03_ili2_v13&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;dbschema&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;av_mopublic_export&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;]
        ]
        &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; params = mapping.get(requestedFileName)
        &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; modelName = params[&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;modelname&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;]
        &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; dbschema = params[&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;dbschema&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;]

        &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; config = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Config()
        config.setDbhost(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
        config.setDbdatabase(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;xanadu2&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
        config.setDbport(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;5432&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
        config.setDbusr(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;stefan&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
        config.setDbpwd(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ziegler12&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
        config.setDbschema(dbschema)
        config.setDburl(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;jdbc:postgresql://localhost:5432/xanadu2&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

        config.setModels(modelName);
        config.setModeldir(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://models.geo.admin.ch/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

        config.setGeometryConverter(PostgisGeometryConverter.class.getName())
        config.setDdlGenerator(GeneratorPostgresql.class.getName())
        config.setJdbcDriver(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.postgresql.Driver&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

        config.setNameOptimization(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
        config.setMaxSqlNameLength(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
        config.setStrokeArcs(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;enable&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
        config.setSqlNull(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;enable&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
        config.setValue(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ch.ehi.sqlgen.createGeomIndex&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

        config.setDefaultSrsAuthority(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;EPSG&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
        config.setDefaultSrsCode(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;21781&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

        &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; tmpDir = &lt;span class=&quot;predefined-type&quot;&gt;System&lt;/span&gt;.getProperty(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;java.io.tmpdir&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;)
        &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; fileName = tmpDir + &lt;span class=&quot;predefined-type&quot;&gt;File&lt;/span&gt;.separator + requestedFileName

        config.setXtffile(fileName)

        Ili2db.runExport(config, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

        ServletOutputStream os = response.getOutputStream();
        &lt;span class=&quot;predefined-type&quot;&gt;FileInputStream&lt;/span&gt; fis = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;FileInputStream&lt;/span&gt;(fileName);
        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; buffSize = &lt;span class=&quot;integer&quot;&gt;1024&lt;/span&gt;;
            &lt;span class=&quot;type&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;[]&lt;/span&gt; buffer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;byte&lt;/span&gt;[buffSize];
            &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len;
            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((len = fis.read(buffer)) != -&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;) {
                os.write(buffer, &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;, len);
                os.flush();
                response.flushBuffer();
            }
        } &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; {
            os.close();
        }
    }
}&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 1 -2&lt;/strong&gt;: Weil JDBC-Treiber anders geladen werden, müssen wir Grape speziell konfigurieren. Brauchen wir spezielle Mavenrepositories müssen wir diese ebenfalls angeben (Zeile 2).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 26 - 34&lt;/strong&gt;: Sämtliche Requests werden auf dieses Servlet umgeleitet (siehe oben). Der URL-Aufruf entspricht ja eigentlich einem Download einer statischen Datei (INTERLIS/XTF-Datei der Gemeinde Schönenwerd), dh. der Request sieht in unserem Fall wie folgt aus: &lt;code&gt;&lt;a href=&quot;http://localhost:8080/2583_schoenenwerd.xtf&quot; class=&quot;bare&quot;&gt;http://localhost:8080/2583_schoenenwerd.xtf&lt;/a&gt;&lt;/code&gt;. Die dazugehörigen Daten liegen in der Datenbank in einem Schema. In welchem Schema steht aber nicht in der URL, sondern das müssen wir mittels Mapping herausfinden. In diesem einfachen Proof of Concept stehen die benötigten Informationen in einer &lt;code&gt;Map&lt;/code&gt;. Anstelle der &lt;code&gt;Map&lt;/code&gt; ist natürlich auch eine Meta-DB o.ä. vorstellbar. Neben des Speicherortes (Datenbankschema) müssen wir noch den Interlis-Modellnamen kennen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 36 - 66&lt;/strong&gt;: Die INTERLIS/XTF-Datei wird erzeugt und in ein temporäres Verzeichnis geschrieben (= Formatumbau).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 68 - 81&lt;/strong&gt;: Die gerade eben erzeugte Datei wird an den Klienten gestreamt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Um den Browser nicht zu arg zu belasten (bei 25 MB XML) verwenden wir cURL in der Konsole, um die Datei herunterzuladen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;curl http://localhost:8080/2583_schoenenwerd.xtf | xmllint --format -&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mit &lt;code&gt;xmllint&lt;/code&gt; wird das heruntergeladene XML noch schön formatiert. Der Formatumbau dauert für die Gemeinde Schönenwerd circa fünf Sekunden und das Resultat kann sich sehen lassen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p3/xtf.png&quot; alt=&quot;XTF Output&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ein Vorteil von ili2pg ist, dass es neben INTERLIS/XTF auch INTERLIS/GML exportieren kann. Der Anwender muss nur &lt;strong&gt;drei&lt;/strong&gt; Buchstaben ändern (.xtf &amp;#8594; .gml):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;curl http://localhost:8080/2583_schoenenwerd.gml | xmllint --format -&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wiederum fünf Sekunden später erfreuen wir uns über die GML-Datei:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p3/gml.png&quot; alt=&quot;GML Output&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je nach Situation (Komplexität und Methode) könnte man auch den Datenumbau (1) gerade beim Aufruf erledigen. In unserem Fall wird der Datenumbau mit SQL-Befehlen gemacht und dauert weniger als eine Sekunde.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eleganter wäre sicher auch wenn man auf das Zwischenspeichern in einer temporären Datei verzichten könnte und ili2pg direkt zum Klienten streamen könnte. Dann muss man auch nicht mehr den Knorz in den Zeilen 68 - 81 durchführen. Soweit ich das verstehe, dürfte das möglich sein, da die darunterliegende Klasse &lt;a href=&quot;http://www.eisenhutinformatik.ch/iox-ili/javadocs/ch/interlis/iom_j/xtf/XtfWriter.html&quot;&gt;XtfWriter&lt;/a&gt; dies bereits unterstützt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Und sollte aus ili2pg irgendwann einmal ein ili2GeoPackage werden, können auch Nicht-PostgreSQL-Anwender diese Bibliotheken verwenden. Man muss bloss den Datenumbau aus dem proprietären System nach GeoPackage machen und den Rest übernimmt ili2GeoPackage&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Bezugsrahmenwechsel: Transformation von Lidardaten</title>
      <link>http://www.sogeo.services/blog/2015/08/24/bezugsrahmenwechsel-transformation-von-lidardaten.html</link>
      <pubDate>Wed, 24 Jun 2015 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2015/08/24/bezugsrahmenwechsel-transformation-von-lidardaten.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Im Frühjahr 2014 liess der Kanton Solothurn eine LiDAR-Befliegung über das &lt;a href=&quot;http://www.sogis1.so.ch/map/lidar&quot;&gt;gesamte Kantonsgebiet&lt;/a&gt; durchführen. Die Daten wurden, wie von uns gewünscht, im Bezugsrahmen LV03 geliefert. Nicht die sinnvollste Entscheidung&amp;#8230;&amp;#8203; Der Bezugsrahmenwechsel steht definitiv vor der Tür und falls wir wollen, dass die Rohdaten in Zukunft noch verwendet werden, müssen wir wohl oder übel auch die 1&apos;066 LAZ-Dateien transformieren.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Für die Transformation stehen - je nach Genauigkeit der Daten - verschiedene Transformationsmethoden zur Verfügung. Eine davon ist die Transformation mittels NTv2-Gitter. Anstelle der Dreiecke wird hier ein regelmässiges Gitter verwendet. Die Differenz zwischen der Transformation mittels Dreiecksvermaschung und NTv2-Gitter ist im Kanton Solothurn sehr klein:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/brw_lidar/ntv2_vs_chenyx06.jpg&quot; alt=&quot;NTv2-Genauigkeit Kanton Solothurn&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Abbildung zeigt die Differenzen eines 100 m x 100 m Rasters. In drei sehr kleinen Gebieten wird die maximale Abweichung von 25 mm erreicht. Der Mittelwert ist 1.3 mm, der Median bloss 0.6 mm. Die Genauigkeit der LiDAR-Daten liegt im einstelligen bis tiefen zweistelligen Zentimeterbereich. Für die Transformation genügt das NTv2-Gitter also vollkommen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eine Bedingung an die transformierten Daten ist, dass sie ebenfalls wieder in Quadratkilometer-Kacheln mit &amp;laquo;schönen&amp;raquo; Boundingbox-Koordinaten vorliegen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/brw_lidar/kachel.png&quot; alt=&quot;Kacheleinteilung&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Bild zeigt exemplarisch vier Kacheln. Im linken Teil sind diese vier Kacheln im Bezugsrahmen LV03 gezeichnet. Im rechten Teil (Bezugsrahmen LV95) sind die transformierten Kacheln grau gezeichnet. Diese &amp;laquo;hässlichen&amp;raquo; Koordinaten sind aber für die Kacheleinteilung nicht erwünscht, sondern die &amp;laquo;schönen&amp;raquo; runden Koordinaten. Das bedeutet, dass die graue Kachel mit dem Gebäude neu in vier Kacheln zu liegen kommt. Anders formuliert: Das Gebäude liegt in einer neuen Kachel, die Daten aus vier alten Kacheln beinhaltet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Software muss also etwas Ähnliches wie GDAL mit seinem &lt;a href=&quot;http://www.gdal.org/drv_vrt.html&quot;&gt;vrt-Treiber&lt;/a&gt; anbieten. Dann kann man  genau gleich vorgehen wie bereits mit den &lt;a href=&quot;http://sogeo.ch/blog/2014/11/15/bezugsrahmenwechsel-transformation-von-rasterdaten-number-1/&quot;&gt;Orthofotos&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.pdal.io/&quot;&gt;PDAL&lt;/a&gt; ist ein relativ neues Projekt. Es ist eine Bibliothek für &quot;translating and manipulating point cloud data&quot;. Was GDAL für 2D-Pixel-Daten heute ist, will PDAL für multidimensionale Punkte werden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Zuerst muss ein Tileindex für sämtliche Kacheln &lt;a href=&quot;http://www.pdal.io/apps.html#tindex-command&quot;&gt;erzeugt&lt;/a&gt; werden:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;find /home/stefan/mr_candie_nas/Geodaten/ch/so/agi/hoehen/2014/lidar/ -maxdepth 1 -iname &amp;quot;*.laz&amp;quot; | pdal tindex tileindex.gpkg -f &amp;quot;GPKG&amp;quot; --a_srs EPSG:21781 --t_srs EPSG:21781 --fast_boundary --stdin --lyr_name tileindex&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der Befehl sucht alle Dateien mit der Endung &lt;code&gt;*.laz&lt;/code&gt; und schreibt die Boundingbox in eine GeoPackage-Datei. Mit der Option &lt;code&gt;--a_srs EPSG:21781&lt;/code&gt; wird den LiDAR-Daten ein Koordinatensystem zugewiesen. Ob die LiDAR-Daten bereits mit einem Koordinatensystem versehen sind, lässt sich mit dem &lt;a href=&quot;http://www.pdal.io/apps.html#info-command&quot;&gt;&lt;code&gt;pdal info&lt;/code&gt;-Befehl&lt;/a&gt; herausfinden:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;pdal info --metadata LAS_592228.laz&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;liefert:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;{
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;LAS_592228.laz&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:
  {
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;comp_spatialreference&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;compressed&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;value&quot;&gt;true&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;14347366&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;creation_doy&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;312&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;creation_year&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;2014&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;dataformat_id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;dataoffset&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;329&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;filesource_id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;global_encoding&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;AAA=&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;header_size&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;227&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;major_version&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;maxx&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;float&quot;&gt;592999.98999999999&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;maxy&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;float&quot;&gt;228999.98999999999&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;maxz&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;float&quot;&gt;2134.52&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;minor_version&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;minx&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;592000&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;miny&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;228000&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;minz&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;float&quot;&gt;918.08000000000004&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;offset_x&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;-0&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;offset_y&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;-0&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;offset_z&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;-0&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;project_id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;00000000-0000-0000-0000-000000000000&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;scale_x&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;float&quot;&gt;0.01&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;scale_y&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;float&quot;&gt;0.01&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;scale_z&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;float&quot;&gt;0.01&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;software_id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;TerraScan&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;spatialreference&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;system_id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  },
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;pdal_version&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;1.0.0.b1 (git-version: 1dce22)&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hat die Datei bereits ein Koordinatensystem, sieht der Output so aus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;{
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;LAS_592228.laz&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:
  {
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;comp_spatialreference&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;PROJCS[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;CH1903 / LV03&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,GEOGCS[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;CH1903&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,DATUM[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;CH1903&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,SPHEROID[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Bessel 1841&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,6377397.155,299.1528128,AUTHORITY[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;EPSG&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;7004&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;]],TOWGS84[674.4,15.1,405.3,0,0,0,0],AUTHORITY[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;EPSG&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;6149&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;]],PRIMEM[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Greenwich&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,0,AUTHORITY[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;EPSG&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;8901&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;]],UNIT[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;degree&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,0.0174532925199433,AUTHORITY[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;EPSG&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;9122&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;]],AUTHORITY[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;EPSG&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;4149&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;]],PROJECTION[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Hotine_Oblique_Mercator_Azimuth_Center&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;],PARAMETER[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;latitude_of_center&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,46.95240555555556],PARAMETER[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;longitude_of_center&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,7.439583333333333],PARAMETER[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;azimuth&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,90],PARAMETER[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;rectified_grid_angle&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,90],PARAMETER[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;scale_factor&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,1],PARAMETER[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;false_easting&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,600000],PARAMETER[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;false_northing&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,200000],UNIT[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;metre&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,1,AUTHORITY[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;EPSG&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;9001&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;]],AXIS[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,EAST],AXIS[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,NORTH],AUTHORITY[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;EPSG&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;21781&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;compressed&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;value&quot;&gt;true&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;14347366&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;creation_doy&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;224&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;creation_year&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;2015&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;dataformat_id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;dataoffset&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;2181&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;filesource_id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;global_encoding&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;AAA=&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;header_size&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;227&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;major_version&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;maxx&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;float&quot;&gt;592999.98999999999&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;maxy&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;float&quot;&gt;228999.98999999999&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;maxz&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;float&quot;&gt;2134.52&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;minor_version&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;minx&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;592000&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;miny&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;228000&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;minz&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;float&quot;&gt;918.08000000000004&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;offset_x&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;offset_y&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;offset_z&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;project_id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;00000000-0000-0000-0000-000000000000&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;scale_x&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;float&quot;&gt;0.01&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;scale_y&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;float&quot;&gt;0.01&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;scale_z&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;float&quot;&gt;0.01&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;software_id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;PDAL 1.0.0.b1 (e412bd)&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;spatialreference&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;PROJCS[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;CH1903 / LV03&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,GEOGCS[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;CH1903&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,DATUM[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;CH1903&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,SPHEROID[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Bessel 1841&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,6377397.155,299.1528128,AUTHORITY[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;EPSG&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;7004&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;]],TOWGS84[674.4,15.1,405.3,0,0,0,0],AUTHORITY[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;EPSG&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;6149&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;]],PRIMEM[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Greenwich&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,0,AUTHORITY[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;EPSG&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;8901&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;]],UNIT[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;degree&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,0.0174532925199433,AUTHORITY[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;EPSG&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;9122&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;]],AUTHORITY[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;EPSG&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;4149&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;]],PROJECTION[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Hotine_Oblique_Mercator_Azimuth_Center&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;],PARAMETER[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;latitude_of_center&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,46.95240555555556],PARAMETER[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;longitude_of_center&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,7.439583333333333],PARAMETER[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;azimuth&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,90],PARAMETER[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;rectified_grid_angle&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,90],PARAMETER[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;scale_factor&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,1],PARAMETER[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;false_easting&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,600000],PARAMETER[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;false_northing&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,200000],UNIT[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;metre&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,1,AUTHORITY[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;EPSG&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;9001&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;]],AXIS[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,EAST],AXIS[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,NORTH],AUTHORITY[&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;EPSG&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;21781&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;system_id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;PDAL&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  },
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;pdal_version&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;1.0.0.b1 (git-version: 1dce22)&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Option &lt;code&gt;--t_srs&lt;/code&gt; beschreibt das Koordinatensystem des zu erzeugenden Tileindexes. Mit &lt;code&gt;--fast_boundary&lt;/code&gt; wird die Boundingbox nicht aus den Daten selbst eruiert, sondern es werden die Koordinaten aus den Metadaten verwenden. Und ja, es ist massiv schneller.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anschliessend an die Erstellung des Tileindexes, kann mittels Pythonskript, einer For-Schleife und dreier PDAL-Befehlen das gewünschte Resultat berechnet werden:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;python&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
47
48
49
&lt;strong&gt;50&lt;/strong&gt;
51
52
53
54
55
56
57
58
59
&lt;strong&gt;60&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;os.path&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;osgeo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ogr&lt;/span&gt;, &lt;span class=&quot;include&quot;&gt;osr&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;sys&lt;/span&gt;

ogr.UseExceptions()

S_SRS = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;+proj=somerc +lat_0=46.952405555555555N +lon_0=7.439583333333333E +ellps=bessel +x_0=600000 +y_0=200000 +towgs84=674.374,15.056,405.346 +units=m +units=m +k_0=1 +nadgrids=./chenyx06/chenyx06a.gsb&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
T_SRS = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;+proj=somerc +lat_0=46.952405555555555N +lon_0=7.439583333333333E +ellps=bessel +x_0=2600000 +y_0=1200000 +towgs84=674.374,15.056,405.346 +units=m +k_0=1 +nadgrids=@null&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

LAYERNAME = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;tileindex&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
TEMPDIR = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/tmp/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

TILEINDEX = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/home/stefan/tmp/lidar/tileindex.gpkg&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
OUTDIR = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/home/stefan/tmp/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

BUFFER = &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;
SCALE = &lt;span class=&quot;float&quot;&gt;0.01&lt;/span&gt;

gpkg = ogr.Open(TILEINDEX)
lyr = gpkg.GetLayerByName(LAYERNAME)

&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; feat &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; lyr:
    cmd = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;rm &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + os.path.join(TEMPDIR, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;*.las&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
    os.system(cmd)

    cmd = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;rm &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + os.path.join(TEMPDIR, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;*.laz&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
    os.system(cmd)

    filename = feat.GetField(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;*** &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + os.path.basename(filename) + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; ***&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

    env = feat.GetGeometryRef().GetEnvelope()
    min_x = &lt;span class=&quot;predefined&quot;&gt;int&lt;/span&gt;(env[&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;float&quot;&gt;0.001&lt;/span&gt;)
    min_y = &lt;span class=&quot;predefined&quot;&gt;int&lt;/span&gt;(env[&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;] + &lt;span class=&quot;float&quot;&gt;0.001&lt;/span&gt;)
    max_x = &lt;span class=&quot;predefined&quot;&gt;int&lt;/span&gt;(env[&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;] + &lt;span class=&quot;float&quot;&gt;0.001&lt;/span&gt;)
    max_y = &lt;span class=&quot;predefined&quot;&gt;int&lt;/span&gt;(env[&lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;] + &lt;span class=&quot;float&quot;&gt;0.001&lt;/span&gt;)

    &lt;span class=&quot;comment&quot;&gt;# Create new file name.&lt;/span&gt;
    filename_lv95 = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;LAS_&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + &lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(min_x/&lt;span class=&quot;integer&quot;&gt;1000&lt;/span&gt; + &lt;span class=&quot;integer&quot;&gt;2000&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + &lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(min_y/&lt;span class=&quot;integer&quot;&gt;1000&lt;/span&gt; + &lt;span class=&quot;integer&quot;&gt;1000&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.laz&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    filename_lv95 = os.path.join(OUTDIR, filename_lv95)

    &lt;span class=&quot;comment&quot;&gt;# Get a slightly larger tile. Two meters buffer is enough. We crop afterwards.&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;# Reason: 620&apos;000 -&amp;gt; 2&apos;620&apos;000.65&lt;/span&gt;
    bounds = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;+&lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(min_x-BUFFER)+&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;+&lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(max_x+BUFFER)+&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;], [&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;+&lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(min_y-BUFFER)+&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;+&lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(max_y+BUFFER)+&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    cmd = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;pdal tindex --merge &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt; + TILEINDEX + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; --lyr_name tileindex --bounds &amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt; + &lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(bounds) + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;&amp;quot; --t_srs EPSG:21781 &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt; + os.path.join(TEMPDIR, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;tmp.las&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;)
    os.system(cmd)

    &lt;span class=&quot;comment&quot;&gt;# Now change reference frame with ntv2.&lt;/span&gt;
    cmd = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;pdal translate --a_srs &amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;+S_SRS+&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;&amp;quot; --t_srs &amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;+T_SRS+&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;&amp;quot; -i &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt; + os.path.join(TEMPDIR, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;tmp.las&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; -o &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt; + os.path.join(TEMPDIR, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;tmp_lv95.las&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;)
    os.system(cmd)

    &lt;span class=&quot;comment&quot;&gt;# Set better/nicer EPSG:2056. The ntv2 transformation lacks of datum name.&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;# Crop to nice bbbox.&lt;/span&gt;
    bounds = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;+&lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(min_x+&lt;span class=&quot;integer&quot;&gt;2000000&lt;/span&gt;)+&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;+&lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(max_x+&lt;span class=&quot;integer&quot;&gt;2000000&lt;/span&gt;)+&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;], [&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;+&lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(min_y+&lt;span class=&quot;integer&quot;&gt;1000000&lt;/span&gt;)+&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;+&lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(max_y+&lt;span class=&quot;integer&quot;&gt;1000000&lt;/span&gt;)+&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    cmd = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;pdal translate --a_srs EPSG:2056 --t_srs EPSG:2056 --writers.las.format=&amp;quot;1&amp;quot; --bounds &amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt; + bounds + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;&amp;quot; -z -i &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt; + os.path.join(TEMPDIR, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;tmp_lv95.las&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; -o &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt; + os.path.join(OUTDIR, filename_lv95)
    os.system(cmd)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Grundprinzip resp. -vorgehen steht bereits &lt;a href=&quot;http://sogeo.ch/blog/2014/11/15/bezugsrahmenwechsel-transformation-von-rasterdaten-number-1/&quot;&gt;hier&lt;/a&gt;. Interessant sind bloss die drei PDAL-Aufrufe:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 48 - 50&lt;/strong&gt;: Es wird aus dem Tileindex eine etwas (&lt;code&gt;BUFFER&lt;/code&gt; = 2 Meter) grössere Kachel ausgeschnitten. Es muss nur soviel mehr sein, dass wir anschliessend an die Transformation garantiert &amp;laquo;schöne&amp;raquo; LV95-Koordinaten ausschneiden können. Mit &lt;code&gt;pdal tindex&lt;/code&gt; und der Option &lt;code&gt;--merge&lt;/code&gt; können Daten, die in einem Tileindex vorliegen, zusammengefügt werden. Zusätzlich gibt es die Option &lt;code&gt;--bounds&lt;/code&gt; mit der nur ein ganz bestimmtes Rechteck gemerged resp. ausgeschnitten werden kann. Leider - so wie ich es verstanden habe - werden jeweils zuerst sämtliche vom Rechteck betroffene Kacheln komplett zusammengefügt und erst anschliessend ausgeschnitten. Das schlägt sich einerseits in der Geschwindigkeit und andererseits im RAM-Verbrauch nieder. In Normalfall sind ja neun Kacheln betroffen, die zuerst zusammengefügt werden müssen. Das braucht circa 9 GB RAM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 53 - 54&lt;/strong&gt;: Nach dem Zusammenfügen und Ausschneiden können die Daten mit dem NTv2-Grid transformiert werden. Dazu verwendet man den Befehl &lt;code&gt;pdal translate&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 58 - 59&lt;/strong&gt;: Zu guter Letzt müssen die transformierten Daten auf die &amp;laquo;schönen&amp;raquo; Koordinaten zurechtgeschnitten werden. Zudem kann in diesem Schritt das Koordinatensystem in den Metadaten sauber gesetzt werden (&lt;code&gt;--a_srs EPSG:2056&lt;/code&gt; und &lt;code&gt;--t_srs EPSG:2056&lt;/code&gt;). Sonst stehen da die hässlichen PROJ4-Strings der NTv2-Transformation drin. Für das Zuschneiden kann der Befehl &lt;code&gt;pdal translate&lt;/code&gt; mit der Option &lt;code&gt;--bounds&lt;/code&gt; verwendet werden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Resultat sind jetzt 1&apos;066 LiDAR-Kacheln mit &amp;laquo;schönen&amp;raquo; Boundingbox-Koordinaten in LV95.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die ganze Rechnerei dauert aber ein wenig. Liegen die Daten lokal auf der SSD vor, dauert das Prozedere für eine Kachel circa 150 Sekunden. Mein Setup war aufgrund des Platzbedarfs leider ziemlich übel: Die Daten liegen auf einem NAS, das via WLAN an den Computer angebunden ist. Gerechnet wird in einer virtuellen Maschine, in der das NAS mit &lt;code&gt;sshfs&lt;/code&gt; gemounted ist. So rechnete das fast 4 Tage vor sich hin. Also fast doppelt so lange.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hätte man jedoch genügend RAM, könnte man den Prozess leicht parallelisieren. Man muss bloss das Skript x-mal anstossen und die For-Schleife dürfte nicht den gleichen Tileindex als Input haben.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der Prozess selbst konnte leicht optimert werden, indem beim Zwischenschritt nicht mit der Option &lt;code&gt;-c&lt;/code&gt; komprimiert wurde. Ebenfalls gewinnbringend wirkt sich der Einsatz von &lt;code&gt;--bounds&lt;/code&gt; anstelle &lt;code&gt;--polygon&lt;/code&gt; aus. Will man also bloss ein Rechteck ausscheiden und nicht ein beliebiges Polygon reicht &lt;code&gt;--bounds&lt;/code&gt; allemal und &lt;code&gt;pdal&lt;/code&gt; muss in diesem Fall keine teuren &lt;a href=&quot;http://trac.osgeo.org/geos/&quot;&gt;GEOS&lt;/a&gt;-Operationen verwenden.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Interlis leicht gemacht #2</title>
      <link>http://www.sogeo.services/blog/2015/06/09/interlis-leicht-gemacht-p2.html</link>
      <pubDate>Tue, 9 Jun 2015 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2015/06/09/interlis-leicht-gemacht-p2.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Im &lt;a href=&quot;http://sogeo.ch/blog/2015/05/09/interlis-leicht-gemacht-number-1/&quot;&gt;letzten Beitrag&lt;/a&gt; habe ich gezeigt, wie man einfach und effizient mit einem Kommandozeilenbefehl und dem Java-Tool &lt;a href=&quot;http://www.eisenhutinformatik.ch/interlis/ili2pg/&quot;&gt;ili2pg&lt;/a&gt; aus INTERLIS-Modellen eine Datenbankstruktur anlegen kann.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Schöne an Java und an ili2pg ist, dass man diese Funktionalität jetzt auch in eigenen Java-Code und dementsprechend in einen eigenen Importprozess einbinden kann. Eventuell müssen ja vorgängig Daten bearbeiten werden oder nach dem Import müssen weitere Prozessierungen vorgenommen werden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wie das geht? Ganz einfach: Einzig die drei Jar-Dateien &lt;code&gt;ili2c.jar&lt;/code&gt;, &lt;code&gt;ili2pg.jar&lt;/code&gt; und &lt;code&gt;postgresql-9.1-901.jdbc4.jar&lt;/code&gt; müssen im Klassenpfad sein. Mit einer IDE seiner/ihrer Wahl kein Problem. Das kann man sich sogar zusammenklicken.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ein minimales Java-Programm zum Importieren einer ITF-Datei sieht wie folgt aus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;namespace&quot;&gt;org.catais.interlis&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ch.ehi.ili2db.base.Ili2db&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ch.ehi.ili2db.base.Ili2dbException&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ch.ehi.ili2db.gui.Config&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ch.ehi.ili2pg.converter.PostgisGeometryConverter&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ch.ehi.sqlgen.generator_impl.jdbc.GeneratorPostgresql&lt;/span&gt;;


&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;Ili2pgTest&lt;/span&gt; {

        &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; main(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;[]&lt;/span&gt; args) {

        Config config = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Config();
        config.setDbdatabase(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;xanadu2&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
        config.setDbhost(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
        config.setDbport(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;5432&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
        config.setDbusr(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;stefan&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
        config.setDbpwd(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ziegler12&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
        config.setDbschema(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;test5&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
        config.setModels(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;DM01AVCH24LV95D&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
        config.setModeldir(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/home/stefan/Downloads/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

        config.setGeometryConverter(PostgisGeometryConverter.class.getName());
        config.setDdlGenerator(GeneratorPostgresql.class.getName());
        config.setJdbcDriver(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.postgresql.Driver&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

        config.setNameOptimization(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
        config.setMaxSqlNameLength(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

        config.setDefaultSrsAuthority(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;EPSG&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
        config.setDefaultSrsCode(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;2056&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

        config.setXtffile(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/home/stefan/Downloads/ch_lv95_254900.itf&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

        &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; dburl = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;jdbc:postgresql://&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + config.getDbhost() + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + config.getDbport() + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + config.getDbdatabase();
        config.setDburl(dburl);

        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
            Ili2db ili2pg = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Ili2db();
            ili2pg.runImport(config, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
        } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Ili2dbException e) {
            e.printStackTrace();
        }
    }
}&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Man benötigt lediglich zwei Klassen: eine Konfigurationsklasse &lt;code&gt;Config&lt;/code&gt; und die eigentliche Importklasse &lt;code&gt;Ili2db&lt;/code&gt;. Mittels der Konfigurationsklasse steuert man verschiedene Parameter &lt;em&gt;und&lt;/em&gt; in welchen Datenbanktyp importiert werden soll. Dies ist nötig, um gewisse Unterschiede zwischen den Datenbanktypen abzufangen resp. anders zu behandeln.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 1 - 22&lt;/strong&gt;: Diese Zeilen sollten eigentlich selbsterklärend sein.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 24 - 26&lt;/strong&gt;: Hier wird der Konfigurationsklasse mitgeteilt, dass es sich bei der Datenbank um PostgreSQL/Postgis handelt. Dies hat Auswirkungen auf die Konvertierung der Geometrie und auf das Erstellen der SQL-Befehle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 28 - 29&lt;/strong&gt;: Mit der Methode &lt;code&gt;setNameOptimization(&quot;topic&quot;)&lt;/code&gt; werden die Datenbanktabellennamen zusammengesetzt aus Topic- und Klassennamen (verbunden mit einem Untertrich): &lt;code&gt;topic_class&lt;/code&gt;. Mit der Methode &lt;code&gt;setMaxSqlNameLength(&quot;60&quot;)&lt;/code&gt; wird die maximale Länge der SQL-Namen auf 60 Zeichen gesetzt. Das Setzen der maximalen Länge ist wichtig, da der Prozess sonst abbricht.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 31 - 32&lt;/strong&gt;: Wird was anderes als LV03 (EPSG:21781) importiert, muss das hier mittels EPSG-Code definiert werden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeile 34&lt;/strong&gt;: Hier wird die zu importierende Interlis-Datei angegeben.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 36 - 37&lt;/strong&gt;: &lt;del&gt;Warum das manuelle Zusammensetzen der Datenbankurl noch nötig ist, ist mir nicht ganz klar. Eigentlich kennt die Konfigurationsklasse bereits alle angaben, die dazu benötig werden.&lt;/del&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 40 - 41&lt;/strong&gt;: Zu guter Letzt kann die Importklasse instanziiert werden und der Importprozess kann gestartet werden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Falls keine Fehlermeldungen in der Konsole erscheinen, sollten die Daten erfolgreich importiert worden sein:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p2/pgadmin3.png&quot; alt=&quot;pgadmin3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Interlis leicht gemacht #1</title>
      <link>http://www.sogeo.services/blog/2015/05/09/interlis-leicht-gemacht-number-1.html</link>
      <pubDate>Sat, 9 May 2015 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2015/05/09/interlis-leicht-gemacht-number-1.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Im Kanton Solothurn wird gegenwärtig die &lt;a href=&quot;http://www.cadastre.ch/internet/gb/de/home/egris/doc/definitionen_und_schnittstellen.html&quot;&gt;AVGBS&lt;/a&gt; eingeführt. Die Gebäudeadressen sollen nicht von den einzelnen Nachführungsgeometern an das Grundbuch geliefert werden, sondern durch das &lt;a href=&quot;http://www.agi.so.ch&quot;&gt;Amt für Geoinformation&lt;/a&gt;. Die Daten der amtlichen Vermessung - aus denen die Lieferung erstellt wird - liegen wochenaktuell als Kopie zentral in einer PostgreSQL/PostGIS-Datenbank beim Amt für Geoinformation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Datenmodell &lt;a href=&quot;http://models.geo.admin.ch/BJ/KS3-20060703.ili&quot;&gt;GB2AV&lt;/a&gt; (aka &quot;Kleine Schnittstelle&quot;), das die auszutauschenden Daten zwischen dem Grundbuch und der amtlichen Vermessung beschreibt, ist in INTERLIS 2.2 geschrieben. Uiuiui, INTERLIS 2&amp;#8230;&amp;#8203; Vererbung und so. Noch nie wirklich was mit gemacht. Bisweilen immer nur INTERLIS 1. Anstatt nur Trockenübungen, ergibt sich hier und jetzt die Gelegenheit etwas Praktisches mit INTERLIS 2 zu machen. Wie kommen jetzt also die Gebäudeadressen aus unserer zentralen Datenbank ins Grundbuch? Oder anders gefragt: Wie erstelle ich diese INTERLIS 2-Transferdatei?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Erstellen der INTERLIS 2-Transferdatei besteht aus zwei wesentlichen Schritten: &lt;em&gt;Datenumbau&lt;/em&gt; und &lt;em&gt;Formatumbau&lt;/em&gt;. Zuerst müssen die Gebäudeadressen so umgebaut werden, damit sie dem AVGBS-Modell entsprechen. Das passiert in der Datenbank. Der zweite Schritt ist dann nur noch ein Export aus der Datenbank in die INTERLIS 2-Transferdatei. Also ein Formatumbau vom Datenbankformat in das INTERLIS 2 Austauschformat.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der Datenumbau ist ein Umbau der Daten vom Modell der amtlichen Vermessung in das AVGBS-Modell in der Datenbank. Das leere AVGBS-Modell (also die verschiedenen Tabellen) in der Postgis-Datenbank erzeugt mir die Software &lt;a href=&quot;http://www.eisenhutinformatik.ch/interlis/ili2pg/&quot;&gt;ili2pg&lt;/a&gt;. Die Software wird zum jetzigen Zeitpunkt weiterentwickelt: Dokumentation (Programmoptionen, Abbildungsregeln von Klassen, Vererbungsstrategie), Umgang mit Kreisbogen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Folgender Aufruf erzeugt ein Datenbankschema mit leeren Tabellen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;java -Xms128m -Xmx2048m -jar ili2pg.jar --schemaimport --dbhost localhost --dbport 5432 --dbdatabase xanadu --dbschema av_avgbs --dbusr stefan --dbpwd ziegler12 --models GB2AV --modeldir ./ --nameByTopic&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--schemaimport&lt;/code&gt;: Es werden keine Daten importiert sondern lediglich leere Tabellen erzeugt.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--models&lt;/code&gt;: Das zu verwendende Interlismodell (oder mehrere Interlismodelle).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--modeldir&lt;/code&gt;: Verzeichnisse, wo die Interlismodelle liegen (oder Repository-URL).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--nameByTopic&lt;/code&gt;: Die Tabellen werden nach dem Schema &lt;code&gt;Topicname_Klassenname&lt;/code&gt; erzeugt.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p1/schemaimport.png&quot; alt=&quot;ili2pg schemaimport&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aus dem objektorientierten Interlismodell wurden nach gewissen Regeln in der relationalen Datenbank Tabellen erzeugt. Das Verständnis für die Abbildung des Modelles in der Datenbank braucht vielleicht ein wenig Übung. Aber hat man das UML-Diagramm, das Interlismodell und die Tabellen in der Datenbank vor Augen, lernt man das relativ schnell.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Für den eigentlichen Datenumbau - also das Abfüllen der vorher erstellen, leeren Tabellen mit den in der Datenbank vorhandenen Daten der amtlichen Vermessung - verwende ich &lt;a href=&quot;http://community.pentaho.com/projects/data-integration/&quot;&gt;Kettle&lt;/a&gt;. Leider scheint das Projekt &lt;a href=&quot;http://geokettle.org/&quot;&gt;GeoKettle&lt;/a&gt; nicht mehr aktiv zu sein. Da bei diesem Datenumbau keine Geometrien umher geschoben werden müssen, kann man auch das &quot;normale&quot; Kettle verwenden. Exemplarisch eine Transformation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/interlis_leicht_gemacht_p1/kettle.png&quot; alt=&quot;Kettle&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In dieser Kettle-Transformation werden sämtliche Gebäude aus den Daten der amtlichen Vermessung in die Tabelle/Klasse &lt;code&gt;Gebaeude&lt;/code&gt; des Topics &lt;code&gt;Grundstuecksbeschrieb&lt;/code&gt; geschrieben. Der nötige Verschnitt &quot;Gebäude - Liegenschaft&quot; für die Association &lt;code&gt;GrundstueckGebaeude&lt;/code&gt; (ebenfalls als Tabelle in der Datenbank abgebildet) wird in der Datenbank gerechnet. Analog wird der Datenumbau für die anderen Klassen und Strukturen gemacht.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wenn jetzt alle benötigen Daten in die neuen Tabellen umgebaut wurden, kann der Formatumbau ausgelöst werden. Beim Formatumbau hilft mir wiederum die Software &lt;em&gt;ili2pg&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;java -jar ili2pg.jar --export --dbhost localhost --dbport 5432 --dbdatabase xanadu --dbschema av_avgbs --dbusr stefan --dbpwd ziegler12 --models GB2AV grundstuecksbeschrieb.xtf&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ein Verzeichnis, wo sich das Interlismodell befindet, muss man nicht mehr angeben, da das Modell in einer zusätzlichen Tabelle beim Schemaimport mit importiert wurde.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Ergebnis des Exportes ist eine INTERLIS 2-Transferdatei. Beim Überprüfen stellt man fest, dass die Daten aber zweimal vorhanden sind: einmal im Topic &lt;code&gt;Grundstuecksbeschrieb&lt;/code&gt; und ein zweites Mal im Topic &lt;code&gt;Mutationstabelle&lt;/code&gt;. Das Topic &lt;code&gt;Mutationstabelle&lt;/code&gt; erbt sämtliche Klassen des Topics &lt;code&gt;Grundstuecksbeschrieb&lt;/code&gt;. Beim Export weiss &lt;em&gt;ili2pg&lt;/em&gt; nicht zu welchen Topic die Daten gehören und schreibt sie bei beiden. Dieses Verhalten muss in einer Weiterentwicklung geändert werden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dieses Vorgehen eignet sich auch hervorragend für die Umsetzung von minimalen Geodatenmodellen im Rahmen des &lt;a href=&quot;https://www.admin.ch/opc/de/classified-compilation/20050726/index.html&quot;&gt;GeoIG&lt;/a&gt;, wie Peter Staub in seinem &lt;a href=&quot;http://www.gl.ch/documents/Whitepaper_UmsetzungMGDM.pdf&quot;&gt;Whitepaper&lt;/a&gt; eindrücklich zeigt.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>QGIS Server: VRT vs. GeoPackage Raster</title>
      <link>http://www.sogeo.services/blog/2014/12/25/qgis-server-vrt-vs-geopackage.html</link>
      <pubDate>Thu, 25 Dec 2014 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2014/12/25/qgis-server-vrt-vs-geopackage.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Seit &lt;a href=&quot;http://osgeo-org.1560.x6.nabble.com/gdal-dev-GDAL-GeoPackage-raster-support-td5177342.html&quot;&gt;kurzem&lt;/a&gt; unterstützt GDAL &lt;a href=&quot;http://www.gdal.org/drv_geopackage_raster.html&quot;&gt;Geopackage Raster&lt;/a&gt;, was ziemlich cool ist. Jetzt man kann man z.B. sämtliche Orthofotos des Kantons Solothurn (1993 bis 2014) in eine &lt;a href=&quot;http://www.catais.org/geodaten/ch/so/kva/orthofoto/orthofoto.gpkg&quot;&gt;85 GB grosse SQLite-Datenbank&lt;/a&gt; packen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Und weil mehr oder weniger gilt &amp;laquo;Kann es GDAL, so kann es auch QGIS.&amp;raquo;, soll hier kurz die Performance von QGIS Server anhand eines Orthofoto-WMS verglichen werden. Momentan wird aus vielen einzelnen GeoTIFF-Dateien eine VRT-Datei erstellt und diese in QGIS geladen. Bis zum Massstab 1:20&apos;000. Für kleinere Massstäbe wird ein 5m-Orthofoto verwendet. Ab diesem Massstab sieht man praktisch keinen Unterschied mehr zwischen Originalkacheln (12.5cm) und 5m-Orthofoto. Als Resampling-Methode wird &amp;laquo;average&amp;raquo; mit Faktor 2 verwendet. Insgesamt sind es drei VRT-Dateien sowie drei 5m-Orthofotos (für die Jahre 2012-2014).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Zum Vergleich werden zwei Varianten mit Geopackage herangezogen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Pro Jahr eine Geopackage-Datei (zwischen 5 und 10 GB).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Eine einzige Geopackage-Datei mit sämtlichen Orthofotos (inkl. abgeleiteten Produkten, circa 85 GB)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mit folgenden Befehlen und Parametern wurden die GPKG-Dateien erstellt:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;gdal_translate --config OGR_SQLITE_SYNCHRONOUS OFF -co APPEND_SUBDATASET=YES -co RASTER_TABLE=ch.so.agi.orthofoto.2014.rgb -co TILE_FORMAT=PNG_JPEG -of GPKG /home/stefan/Geodaten/ch/so/kva/orthofoto/2014/rgb/12_5cm/ortho2014rgb.vrt /home/stefan/tmp/orthofoto.gpkg
gdaladdo --config OGR_SQLITE_SYNCHRONOUS OFF -oo TABLE=ch.so.agi.orthofoto.2014.rgb -r average /home/stefan/tmp/orthofoto.gpkg 2 4 8 16 32 64 128 256&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Testsetup war gleich wie bei &lt;a href=&quot;http://sogeo.ch/blog/2014/01/29/qgis-server-vs-qgis-server/&quot;&gt;anderen QGIS Server Performance Tests&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Resultat sieht so aus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/vrt_vs_gpkg/ortho_vrt_vs_gpkg_bench.png&quot; alt=&quot;GeoPackage-VRT-Benchmark&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anscheinend ist es völlig egal, ob drei einzelne GPKG-Dateien oder eine sehr grosse GPKG-Datei verwendet wird. Der ganz leichte Geschwindigkeitsvorteil von VRT gegenüber GPKG lässt sich beliebig wiederholen. Interessant ist aber die Tatsache, dass bei den GPKG-Varianten beinahe kein average-Resampling notwendig ist/wäre (Geschwindigkeitsfaktor circa 2.5). Da sehen die gerenderten Bilder auch mit &amp;laquo;nearest neighbour&amp;raquo; ganz ordentlich aus. Ganz im Gegensatz dazu die VRT-Variante, die sichtbar an visueller Qualität verliert ohne average-Resampling.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Fun with GeoKettle Episode 2</title>
      <link>http://www.sogeo.services/blog/2014/11/29/fun-with-geokettle-episode-2.html</link>
      <pubDate>Sat, 29 Nov 2014 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2014/11/29/fun-with-geokettle-episode-2.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eigentlich geht es hier eher um &lt;a href=&quot;http://postgis.net/docs/RT_reference.html&quot;&gt;PostGIS Raster&lt;/a&gt; als um &lt;a href=&quot;http://geokettle.org/&quot;&gt;GeoKettle&lt;/a&gt;. GeoKettle wird jedoch am Schluss noch für einen kleinen Arbeitsschritt verwendet. Darum sei der Titel erlaubt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der Kanton Solothurn hat dieses Jahr eine &lt;a href=&quot;http://www.catais.org/geodaten/ch/so/kva/hoehen/2014/&quot;&gt;LiDAR-Befliegung&lt;/a&gt; über sein ganzes Kantonsgebiet durchführen lassen. Neben den Rohdaten wurden abgeleitete Produkte (z.B. DTM, DOM etc.) hergestellt. Als &lt;strong&gt;eine&lt;/strong&gt; Plausibilitätskontrolle sollen die Fixpunkte der amtlichen Vermessung mit dem 50cm-DTM verglichen werden. Möglichkeiten wie man das machen kann, gibts viele. Ich habe mich für PostGIS Raster entschieden, um ein wenig Praxis darin zu bekommen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Zuerst muss das DTM mit dem Befehl &lt;a href=&quot;http://postgis.net/docs/using_raster_dataman.html#RT_Raster_Loader&quot;&gt;raster2pgsql&lt;/a&gt; in PostGIS importiert werden:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;raster2pgsql -d -s 21781 -I -C -M -F -r /opt/Geodaten/ch/so/kva/hoehen/2014/dtm/*.tif -t 100x100 av_lidar_2014.dtm | psql -d rosebud2&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mit diesem Befehl werden sämtliche GeoTiff-Dateien im Verzeichnis &lt;code&gt;/opt/Geodaten/ch/so/kva/hoehen/2014/dtm/&lt;/code&gt; in die Tabelle &lt;code&gt;dtm&lt;/code&gt; im Schema &lt;code&gt;av_lidar_2014&lt;/code&gt; importiert.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-d&lt;/code&gt;: Vorhandene Tabelle wird gelöscht und neu angelegt.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-s 21781&lt;/code&gt;: Den Daten wird das Koordinatensystem EPSG:21781 zugewiesen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-I&lt;/code&gt;: Es wird ein Index für die Tabelle erzeugt.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-C&lt;/code&gt;: Verschiedene Constraints werden hinzugefügt.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-M&lt;/code&gt;: Nach dem Import wird ein &lt;code&gt;vacuum analyze&lt;/code&gt; ausgeführt.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-F&lt;/code&gt;: Es wird eine Spalte mit dem Dateinamen in der Tabelle hinzugefügt.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-r&lt;/code&gt;: Weiterer Constraint.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-t&lt;/code&gt;: Die Grösse der Kacheln in welche die Ausgangsdaten geschnitten und in der Datenbank gespeichert werden. Die Grösse der Kacheln ist entscheidend für die &lt;a href=&quot;http://duncanjg.wordpress.com/2013/09/21/effect-of-tile-size-and-data-storage-on-postgis-raster-query-times/&quot;&gt;Ausführungsdauer&lt;/a&gt; der Abfragen, die später gemacht werden. Für unseren Anwendungsfall ist es sinnvoll die Kachelgrösse eher klein zu wählen.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das dauert je nach Datenmenge ein paar Minuten und braucht ordentlich Speicherplatz in der Datenbank (DTM und DOM, je 1066 km2):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/fun_with_geokettle_ep2/postgres_size_rosebud2-month.png&quot; alt=&quot;DB size&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das wirklich Schöne an Postgis Raster ist, dass man völlig unkompliziert Vektor- und Rasterdaten gleichzeitig/gemeinsam abfragen kann. Uns interessiert die Höhe aus dem DTM an der Stelle wo ein Fixpunkt der amtlichen Vermessung vorhanden ist:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;class&quot;&gt;SELECT&lt;/span&gt; p.ogc_fid, p.nummer, p.kategorie, p.geometrie, ST_X(p.geometrie) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; x, ST_Y(p.geometrie) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; y,
   p.hoehe &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; h_lfp, ST_Value(r.rast, p.geometrie) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; h_dtm,
   (ST_Value(r.rast, p.geometrie) - p.hoehe) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; diff, p.bfsnr
&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; av_avwmsde_t.cppt &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; p, av_lidar_2014.dtm &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; r
&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; ST_Intersects(r.rast, p.geometrie)
&lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; p.hoehe &lt;span class=&quot;keyword&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;NULL&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; p.kategorie &lt;span class=&quot;keyword&quot;&gt;IN&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;LFP1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;LFP2&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;LFP3&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;);&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die ganze Magie besteht aus zwei Funktionen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ST_Value(r.rast, p.geometrie)&lt;/code&gt;: Diese Funktion liefert für eine Koordinate (p.geometrie) den Zellenwert des Rasters (r.rast) zurück.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ST_Intersects(r.rast, p.geometrie)&lt;/code&gt;: Funktioniert grundsätzlich gleich wie das Vektorpendant.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alles andere ist Beigemüse.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Resultat wird als Shapedatei und als Exceldatei abgespeichert. Dafür verwenden wir GeoKettle. Die GeoKettle-Transformation sieht dann völlig unspektakulär so aus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/fun_with_geokettle_ep2/geokettle_diff_dtm_av.png&quot; alt=&quot;GeoKettle Job&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Und das Resultat? Unter Berücksichtigung der Randbedingungen (50cm-DTM, Fixpunkt teilweise unter Schacht etc.) stimmen die resultierenden Differenzen positiv:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/fun_with_geokettle_ep2/diff_dtm_lfp_v2.png&quot; alt=&quot;Differenz Höhe LFP&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Klar gibt es grössere Differenzen (Fixpunkt auf Gebäude oder Kunstbaute, Kirchenspitze etc.). Diese sind aber praktisch alle erklärbar (und wären auch vorgängig filterbar). Ebenso konnten einige wenige Höhenfehler in den Daten der amtlichen Vermessung gefunden werden.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Bezugsrahmenwechsel: Transformation von Rasterdaten #1</title>
      <link>http://www.sogeo.services/blog/2014/11/15/bezugsrahmenwechsel-transformation-von-rasterdaten-number-1.html</link>
      <pubDate>Sat, 15 Nov 2014 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2014/11/15/bezugsrahmenwechsel-transformation-von-rasterdaten-number-1.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mit dem &lt;a href=&quot;http://www.swisstopo.admin.ch/internet/swisstopo/de/home/products/software/products/chenyx06.html&quot;&gt;NTv2-CHENyx06-Datensatz&lt;/a&gt;  lassen sich beliebige Datenformate (Vektor und Raster) transformieren. So unterstützt z.B. &lt;a href=&quot;http://sourcepole.ch/ntv2-transformations-with-qgis&quot;&gt;QGIS&lt;/a&gt; seit der Version 2.2 diese Möglichkeit der Datumstransformation. Die Genauigkeit dieser Methode ist im Kanton Solothurn nur marginal schlechter als die strenge Transformation mit dem FINELTRA-Algorithmus. Für die allermeisten Darstellungen am Bildschirm oder für die Transformation von Rasterdaten reicht die Genauigkeit völlig aus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ein NTv2-Datensatz kann in verschiedenen WMS-Servern auch dazu verwendet werden Transformationen on-the-fly durchzuführen (z.B. QGIS Server, &lt;a href=&quot;http://docs.geoserver.org/latest/en/user/advanced/crshandling/coordtransforms.html&quot;&gt;GeoServer&lt;/a&gt;). Will man aber trotzdem die Rasterdaten nicht nur on-the-fly transformieren, sondern sie auch physisch vorliegen haben, kann man das mit einem kleinen Skript und &lt;a href=&quot;http://www.gdal.org&quot;&gt;GDAL&lt;/a&gt; machen. Oftmals reicht für nicht-hochauflösende Rasterdaten z.B. eine Translation um +2 Mio / +1 Mio. Eine andere Variante ist die strenge Transformation der Metadaten (&amp;laquo;Worldfile&amp;raquo;). Für hochauflösende Rasterdaten funktioniert das nur noch bedingt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Viele der Rasterdaten liegen in einem nahtlosen Mosaik vor (z.B. Orthofotos). Nach der Transformation sollen weiterhin keine Lücken und Überlappungen zwischen den einzelnen Kacheln sichtbar sein. Um das zu erreichen wird zuerst eine Shapedatei mit den einzelnen Kacheln als Polygon erstellt. Im Kanton Solothurn sind das 1km2-Kacheln:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/brw_raster_p1/kacheleinteilung.png&quot; alt=&quot;Kacheleinteilung&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dieser sogenannte Tileindex wird mit &lt;code&gt;gdaltindex&lt;/code&gt; erstellt:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;gdaltindex -write_absolute_path ortho2014.shp *.tif&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dabei werden sämtliche Tiff-Dateien in dem Verzeichnis berücksichtigt. Mit der Option &lt;code&gt;-write_absolute_path&lt;/code&gt; wird im Attribut &lt;em&gt;location&lt;/em&gt; in der Shapedatei &lt;em&gt;ortho2014.shp&lt;/em&gt; der absolute Pfad der Tiff-Dateien gespeichert.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jetzt ist es Zeit für das kleine Pythonskript, dass schlussendlich nichts Anderes macht als für jede dieser Kacheln ein &lt;code&gt;gdal_warp&lt;/code&gt;-Befehl mit passenden Parameter zusammenzustellen und auszuführen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;python&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;osgeo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ogr&lt;/span&gt;, &lt;span class=&quot;include&quot;&gt;osr&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;os&lt;/span&gt;

S_SRS = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;+proj=somerc +lat_0=46.952405555555555N +lon_0=7.439583333333333E +ellps=bessel +x_0=600000 +y_0=200000 +towgs84=674.374,15.056,405.346 +units=m +units=m +k_0=1 +nadgrids=./chenyx06/chenyx06a.gsb&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
T_SRS = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;+proj=somerc +lat_0=46.952405555555555N +lon_0=7.439583333333333E +ellps=bessel +x_0=2600000 +y_0=1200000 +towgs84=674.374,15.056,405.346 +units=m +k_0=1 +nadgrids=@null&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

ogr.UseExceptions()

shp = ogr.Open(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;mosaic/ortho2014.shp&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
layer = shp.GetLayer(&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;)

&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; feature &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; layer:
    infileName = feature.GetField(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;)
    geom = feature.GetGeometryRef()
    env = geom.GetEnvelope()

    minX = &lt;span class=&quot;predefined&quot;&gt;int&lt;/span&gt;(env[&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;float&quot;&gt;0.001&lt;/span&gt; + &lt;span class=&quot;integer&quot;&gt;2000000&lt;/span&gt;)
    minY = &lt;span class=&quot;predefined&quot;&gt;int&lt;/span&gt;(env[&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;] + &lt;span class=&quot;float&quot;&gt;0.001&lt;/span&gt; + &lt;span class=&quot;integer&quot;&gt;1000000&lt;/span&gt;)
    maxX = &lt;span class=&quot;predefined&quot;&gt;int&lt;/span&gt;(env[&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;] + &lt;span class=&quot;float&quot;&gt;0.001&lt;/span&gt; + &lt;span class=&quot;integer&quot;&gt;2000000&lt;/span&gt;)
    maxY = &lt;span class=&quot;predefined&quot;&gt;int&lt;/span&gt;(env[&lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;] + &lt;span class=&quot;float&quot;&gt;0.001&lt;/span&gt; + &lt;span class=&quot;integer&quot;&gt;1000000&lt;/span&gt;)

    outfileName = &lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(minX)[&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;] + &lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(minY)[&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;] + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;_12_5cm.tif&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    outfileName = os.path.join(os.path.dirname(infileName), &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;lv95&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, outfileName)

    cmd = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/usr/local/gdal/gdal-dev/bin/gdalwarp -s_srs &lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + S_SRS + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; -t_srs &lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + T_SRS + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; -te &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;  + &lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(minX) + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; +  &lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(minY) + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; +  &lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(maxX) + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; +  &lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(maxY)
    cmd += &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; -tr 0.125 0.125 -wo NUM_THREADS=ALL_CPUS -co &apos;PHOTOMETRIC=RGB&apos; -co &apos;TILED=YES&apos; -co &apos;PROFILE=GeoTIFF&apos;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    cmd += &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; -co &apos;INTERLEAVE=PIXEL&apos; -co &apos;COMPRESS=DEFLATE&apos; -co &apos;BLOCKXSIZE=512&apos; -co &apos;BLOCKYSIZE=512&apos;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    vrt = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/opt/Geodaten/ch/so/kva/orthofoto/2014/rgb/12_5cm/ortho2014rgb.vrt&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    cmd += &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; -r bilinear &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + vrt + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + outfileName
    os.system(cmd)

    cmd = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/usr/local/gdal/gdal-dev/bin/gdal_edit.py -a_srs EPSG:2056 &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + outfileName
    os.system(cmd)

    cmd = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/usr/local/gdal/gdal-dev/bin/gdaladdo -r nearest --config COMPRESS_OVERVIEW DEFLATE --config GDAL_TIFF_OVR_BLOCKSIZE 512 &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + outfileName + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; 2 4 8 16 32 64 128&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    os.system(cmd)&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 4 - 5&lt;/strong&gt;: Benötigte Module werden geladen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 7 - 8&lt;/strong&gt;: Es ist möglich neben EPSG-Codes für Transformation mit GDAL auch eigene proj4-Definitionen als Parameter zur übergeben. Bei der Verwendung von NTv2-Gittern ist das ein bisschen hakelig. Es gibt viele Varianten. Viele davon führen zu falschen Resultaten, zwei davon führen zu richtigen Resultaten. Abhängig davon welcher &lt;a href=&quot;http://www.swisstopo.admin.ch/internet/swisstopo/de/home/products/software/products/chenyx06.html&quot;&gt;NTv2-Datensatz&lt;/a&gt; (&lt;em&gt;chenyx06a.gsb&lt;/em&gt; oder &lt;em&gt;chenyx06etrs.gsb&lt;/em&gt;) verwendet wird. Langer Rede kurzer Sinn: Das hier ist eine Kombination, die korrekt transformiert.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeile 12 - 13&lt;/strong&gt;: Die Shapedatei mit der Kacheleinteilung wird geöffnet und ein Layer wird angelegt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 15 -16&lt;/strong&gt;: Die For-Schleife bearbeitet jede Kachel einzeln. Zuerst wird das Attribut &lt;em&gt;location&lt;/em&gt; ausgelesen. Es beinhaltet den kompletten absoluten Pfad der einzelnen Tiff-Datei. Davon verwenden wir aber später nur das Verzeichnis, da wir in ein Unterverzeichnis die resultierenden Tiff-Dateien speichern wollen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 17 - 18&lt;/strong&gt;: Die Geometrie der Kachel wird ausgelesen und die &lt;em&gt;Envelope&lt;/em&gt; (Tupel mit den min/max Koordinatenwerten) berechnet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 20 - 23&lt;/strong&gt;: Aus der &lt;em&gt;Envelope&lt;/em&gt; lesen wir die minimalen X- resp. Y-Werte. Die resultierenden Kacheln sollen wie die Ausgangskacheln &amp;laquo;schöne&amp;raquo; Kilometerkacheln sein. Dazu wird einfach 2 Mio. resp. 1 Mio dazugerechnet. Weil der &lt;code&gt;int&lt;/code&gt;-Befehl abrundet (?), muss den Koordinatenwerten ein kleiner Wert dazu addiert werden, um keine falschen Ganzzahleswerte zu bekommen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 25 - 26&lt;/strong&gt;: Aus den Koordinatenwerten wird der Dateinnamen der neuen Kacheln bestimmt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 28 - 33&lt;/strong&gt;: Hier geschieht die Zauberei. Als Ausgangsdatei wird nicht die einzelne Kacheln verwendet sondern &lt;em&gt;immer&lt;/em&gt; die vrt-Datei (Diese muss u.U. vorgängig noch &lt;a href=&quot;http://www.gdal.org/gdalbuildvrt.html&quot;&gt;erstellt&lt;/a&gt; werden). GDAL sieht jetzt nur eine einzelne, flächendeckende Rasterdatei. Somit muss nur noch der Ausschnitt gewählt werden, der aus dieser einzelnen Rasterdatei ausgeschnitten werden soll. Dieser Ausschnitt wurde ja bereits in den Zeilen 20 - 23 ermittelt. Das Resultat wird wiederum in einer Tiff-Datei gespeichert.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 35 - 39&lt;/strong&gt;: Anschliessend werden in der neuen GeoTiff-Datei noch korrekte Metadaten zum Koordinatensystem gespeichert und es werden interne Overview gerechnet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Resultat sind einzelne Orthofotokacheln, die sich weder überlappen noch sind Lücken zwischen den Kacheln vorhanden. Die Übergänge sind wie im Ausgangsmaterial nicht sichtbar. Einzig am Perimeterrand sind kleine schwarze Ränder sichtbar. Diese entstehen weil im Ausgangsmaterial in diesem Bereich &lt;em&gt;keine&lt;/em&gt; Daten vorhanden sind. Liegt das Ausgangsmaterial im Bezugsrahmen LV95 vor und wird in den Bezugsrahmen LV03 transformiert, dürfte dieses Phänomen nicht auftreten.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/brw_raster_p1/orthorand.png&quot; alt=&quot;Orthofoto Perimeterrand&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der Transformationsprozess dauerte für 384 Kacheln circa 1h 45m. Ein Qualitätsverlust aufgrund des Resamplings ist &lt;em&gt;nicht&lt;/em&gt; feststellbar.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Karten rendern mit PyQGIS</title>
      <link>http://www.sogeo.services/blog/2014/10/19/karten-rendern-mit-pyqgis.html</link>
      <pubDate>Sun, 19 Oct 2014 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2014/10/19/karten-rendern-mit-pyqgis.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An der FOSSGIS 2013 wurde von Andreas Schmid &lt;a href=&quot;http://www.fossgis.de/konferenz/2013/programm/attachments/432_fossgis_2013_Schmid_QGIS_Server_Praesentation.pdf&quot;&gt;gezeigt&lt;/a&gt; wie mit QGIS der &lt;a href=&quot;http://www.cadastre.ch/internet/kataster/de/home/services/service/bp.html&quot;&gt;Basisplan der amtlichen Vermessung&lt;/a&gt; erstellt werden kann. Der ganze Systemaufbau ist nicht gerade trivial weil für das Rendern des Kartenbildes &lt;a href=&quot;http://hub.qgis.org/projects/quantum-gis/wiki/QGIS_Server_Tutorial&quot;&gt;QGIS Server&lt;/a&gt; eingesetzt wird. Dies setzt z.B. Apache 2 und ein FCGI-Modul voraus. Das eigentliche Ziel der Übung ist aber nicht einen WMS-Dienst anzubieten, sondern aus Vektordaten ein Rasterkartenwerk zu erstellen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Weil bei Projektstart einige Funktionen in den Python-Bindings von QGIS (PyQGIS) fehlten, konnte nicht dieser Weg gewählt werden, sondern es wurde der Umweg über einen WMS-Dienst als Kartenrenderer gewählt. Die fehlenden Funktionen sind jetzt alle vorhanden und es steht einer Vereinfachung des Herstellungsprozesses nichts mehr im Wege.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vieles zu PyQGIS steht im &lt;a href=&quot;http://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/&quot;&gt;Kochbuch&lt;/a&gt;. Einige Details fehlen aber. Darum folgt nachstehend ein komplettes Beispiel, das zeigt wie man mit einem vorbereiteten QGIS-Projekt die Rasterkarten anhand einer Blatteinteilung erstellen kann &lt;strong&gt;ohne&lt;/strong&gt; QGIS manuell starten zu müssen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das vorbereitete QGIS-Projekt ist simpel. Es besteht nur aus den Gemeindegrenzen des Kantons Solothurn:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/qgsrenderer_p1/qgisproject.png&quot; alt=&quot;QGIS Projekt&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Als erstes müssen zwei Dateien erstellt werden:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;basisplan.sh&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;basisplan.py&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;basisplan.sh&lt;/code&gt; macht nichts weiter als den Pfad zu den QGIS-Bibliotheken zu setzen und anschliessend die Pythondatei &lt;code&gt;basisplan.py&lt;/code&gt; aufzurufen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;#!/bin/bash
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/stefan/Apps/qgis_master/lib
export PYTHONPATH=$PYTHONPATH:/home/stefan/Apps/qgis_master/share/qgis/python

python basisplan.py&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;basisplan.py&lt;/code&gt; enthält den interessanteren Teil:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;python&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
47
48
49
&lt;strong&gt;50&lt;/strong&gt;
51
52
53
54
55
56
57
58
59
&lt;strong&gt;60&lt;/strong&gt;
61
62
63
64
65
66
67
68
69
&lt;strong&gt;70&lt;/strong&gt;
71
72
73
74
75
76
77
78
79
&lt;strong&gt;80&lt;/strong&gt;
81
82
83
84
85
86
87
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;comment&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;PyQt4.QtCore&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;PyQt4.QtGui&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;qgis.core&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;qgis.gui&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;# Aktuelles Verzeichnis&lt;/span&gt;
current_dir = os.path.dirname(os.path.realpath(__file__))

&lt;span class=&quot;comment&quot;&gt;# QGIS initialisieren&lt;/span&gt;
app = QApplication(sys.argv)
QgsApplication.setPrefixPath(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/home/stefan/Apps/qgis_master&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;predefined-constant&quot;&gt;True&lt;/span&gt;)
QgsApplication.initQgis()

&lt;span class=&quot;comment&quot;&gt;# QGIS-Projekt laden&lt;/span&gt;
QgsProject.instance().setFileName(os.path.join(current_dir,  &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;bpav5000sw.qgs&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;))
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; QgsProject.instance().read():
    sys.exit(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;QGIS-Projekt nicht gefunden.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;comment&quot;&gt;# List mit sämtlichen Layer im QGIS-Projekt&lt;/span&gt;
lst = []
layerTreeRoot = QgsProject.instance().layerTreeRoot()
&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; layerTreeRoot.findLayerIds():
    node = layerTreeRoot.findLayer(&lt;span class=&quot;predefined&quot;&gt;id&lt;/span&gt;)
    lst.append(&lt;span class=&quot;predefined&quot;&gt;id&lt;/span&gt;)

&lt;span class=&quot;comment&quot;&gt;# Layer mit Blatteinteilung laden&lt;/span&gt;
layer_name =  &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;blatteinteilung&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
vlayer = QgsVectorLayer(os.path.join(current_dir, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;basisplan.gpkg&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;|layername=blatteinteilung&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Blatteinteilung&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ogr&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; vlayer.isValid():
    sys.exit(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Blatteinteilung konnte nicht geladen werden.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;comment&quot;&gt;# Rasterkarten erstellen&lt;/span&gt;
iter = vlayer.getFeatures()
&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; feature &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;iter&lt;/span&gt;:
    idx = vlayer.fieldNameIndex(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;nummer&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;)
    nummer = feature.attributes()[idx].toString()

    &lt;span class=&quot;comment&quot;&gt;# Ausschnitt und Grösse der Karte berechnen&lt;/span&gt;
    dpi = &lt;span class=&quot;integer&quot;&gt;508&lt;/span&gt;
    scale = &lt;span class=&quot;integer&quot;&gt;5000&lt;/span&gt;

    geom = feature.geometry()
    p1 = geom.vertexAt(&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;)
    p2 = geom.vertexAt(&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;)

    rect = QgsRectangle(p1, p2)

    dx = rect.width()
    dy = rect.height()

    width = (dx/scale) / &lt;span class=&quot;float&quot;&gt;0.0254&lt;/span&gt; * dpi
    height = (dy/scale) / &lt;span class=&quot;float&quot;&gt;0.0254&lt;/span&gt; * dpi

    &lt;span class=&quot;comment&quot;&gt;# Einstellungen für Kartenrenderer&lt;/span&gt;
    mapSettings = QgsMapSettings()
    mapSettings.setMapUnits(&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;)
    mapSettings.setExtent(rect)
    mapSettings.setOutputDpi(dpi)
    mapSettings.setOutputSize(QSize(width, height))
    mapSettings.setLayers(lst)
    mapSettings.setFlags(QgsMapSettings.DrawLabeling)

    &lt;span class=&quot;comment&quot;&gt;# Karte zeichnen&lt;/span&gt;
    img = QImage(QSize(width, height), QImage.Format_Mono)
    img.setDotsPerMeterX(dpi / &lt;span class=&quot;float&quot;&gt;25.4&lt;/span&gt; * &lt;span class=&quot;integer&quot;&gt;1000&lt;/span&gt;)
    img.setDotsPerMeterY(dpi / &lt;span class=&quot;float&quot;&gt;25.4&lt;/span&gt; * &lt;span class=&quot;integer&quot;&gt;1000&lt;/span&gt;)

    p = QPainter()
    p.begin(img)

    mapRenderer = QgsMapRendererCustomPainterJob(mapSettings, p)
    mapRenderer.start()
    mapRenderer.waitForFinished()

    p.end()

    img.save(os.path.join(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/tmp&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;bpav&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + &lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(scale) + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + &lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(nummer) + &lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.png&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)), &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;comment&quot;&gt;# Layer mit Blatteinteilung löschen&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; vlayer

&lt;span class=&quot;comment&quot;&gt;# QGIS schliessen&lt;/span&gt;
QgsApplication.exitQgis()&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 2 - 8&lt;/strong&gt;: Module werden geladen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeile 11&lt;/strong&gt;: Bei mir funktionieren verschiedene QGIS-Methoden nicht korrekt mit relativen Pfaden, wenn diese direkt reingeschrieben werden (z.B. &lt;code&gt;&quot;./bpav5000sw.qgs&quot;&lt;/code&gt; für das zu ladende QGIS-Projekt). Wird aber zuerst das aktuelle Verzeichnis (in dem das Skript läuft) ermittelt und dieses für die relativen Pfade verwendet, funktionierts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 14 - 16&lt;/strong&gt;: Zuerst wird eine Qt-Applikation und anschliessend QGIS initialisiert. Der Pfad in Zeile 15 zeigt auf die lokale  QGIS-Installation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 19 - 21&lt;/strong&gt;: Hier wird das vorbereitete QGIS-Projekt geladen. Falls es nicht gefunden wird, ist der Rückgabewert der Methode &lt;code&gt;QgsProject.instance().read()&lt;/code&gt; &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 24 - 28&lt;/strong&gt;: Für das Rendern der Karte müssen zuerst sämtliche Layer des QGIS-Projekts in eine Liste geschrieben werden. Sollen nur die sichtbaren Layer gerendert werden, kann man diese mit &lt;code&gt;node.isVisible()&lt;/code&gt; ermitteln.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 31 - 34&lt;/strong&gt;: Die Blatteinteilung wird als QGIS-Layer zusätzlich geladen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 37ff&lt;/strong&gt;: Für jedes Feature des vorhin geladenen Layers mit der Blatteinteilung wird nun die Rasterkarte erstellt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 42 - 56&lt;/strong&gt;: Aufgrund des Massstabes, Auflösung (DPI) und Ausdehnung des Kartenblattes wird die Grösse (Pixelanzahl) und die Boundingbox der zu erstellenden Rasterkarte berechnet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 59 - 65&lt;/strong&gt;: Die oben ermittelnden Werte werden in einer Settings-Klasse gespeichert, die später der Kartenrenderer verwenden wird. Interessant ist die Zeile 65. Hier können verschiedene Flags angegeben werden. Mit &lt;code&gt;QgsMapSettings.DrawLabeling&lt;/code&gt; wird dem Renderer mitgeteilt, dass die Labels gezeichnet werden sollen. Ohne das Flag &lt;code&gt;QgsMapSettings.Antialiasing&lt;/code&gt; werden die Karten ohne &lt;a href=&quot;http://de.wikipedia.org/wiki/Antialiasing_\(Computergrafik\)&quot;&gt;Antialiasing&lt;/a&gt; gezeichnet. Dies ist insbesondere für schwarz-weisse
Rasterkarten sinnvoll, da dann 1-Bit-Karten möglich sind. Die Grösse ist um ein vielfaches kleiner als bei RGB-Bildern und die Karte lässt sich mit jeder beliebigen Farbe einfärben.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mehrere Flags werden mittels Pipe-Zeichen aneinandergereiht, z.B. mit Antialiasing: &lt;code&gt;mapSettings.setFlags(QgsMapSettings.Antialiasing | QgsMapSettings.DrawLabeling)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 68 - 81&lt;/strong&gt;: Als nächstes muss ein &lt;code&gt;QImage&lt;/code&gt;-Objekt mit der passenden Grösse, Format und Auflösung erstellt werden. Für unseren Fall eignet sich das Format &lt;code&gt;QImage.Format_Mono&lt;/code&gt; bestens, denn es erstellt das gewünschte 1-Bit-Rasterbild. Für Farbbilder eignet sich z.B. &lt;code&gt;QImage.Format_RGB32&lt;/code&gt;. Alle möglichen Formate sind &lt;a href=&quot;http://qt-project.org/doc/qt-4.8/qimage.html#Format-enum&quot;&gt;hier&lt;/a&gt; beschrieben.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der Kartenrenderer wird auf Zeile 76 gestartet. Die darauffolgende Zeile ist wichtig, da sonst - ohne auf das Ende zu warten - das &lt;em&gt;unfertige&lt;/em&gt; Bild physisch auf die Festplatte geschrieben wird.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nachdem das Bild fertig gerendert ist, wird es an einem gewünschten Ort gespeichert.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeile 84&lt;/strong&gt;: Ohne das explizite Löschen des zusätzlich geladenen Layers verabschiedet sich mein Skript mit einem &lt;code&gt;Segmentation fault&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeile 87&lt;/strong&gt;: QGIS wird geschlossen und alle verwendeten Layer werden gelöscht (siehe Kommentar zu Zeile 84).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Renderzeit eines Kartenblattes ist abhängig von der Anzahl der Layer, der Komplexität der Symbologie und der Grösse (Pixelanzahl). Am schnellsten sind schwarz-weisse Karten, die ohne Antialiasing gezeichnet werden. Farbige Karten sind ebenfalls schneller ohne als mit Antialiasing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die hier vorgestellte Lösung kann den Herstellungsprozess des Basisplanes der amtlichen Vermessung vereinfachen, da kein WMS-Dienst verwendet wird. Zudem eignet sich diese Lösung wegen der mächtigen Symbologiemöglichkeiten und Flexibilität von QGIS ebenfalls für das Herstellen von Rasterkarten jeglicher Art.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das QGIS-Beispielprojekt inkl. Shell- und Pythonskript gibt es &lt;a href=&quot;../../../data/karten-rendern-mit-pyqgis/qgisrenderer1.zip&quot;&gt;hier&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>NDVI Orthofotos</title>
      <link>http://www.sogeo.services/blog/2014/09/22/ndvi-orthofotos.html</link>
      <pubDate>Mon, 22 Sep 2014 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2014/09/22/ndvi-orthofotos.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der Kanton Solothurn lässt jedes Jahr ein Drittel seiner Fläche neu befliegen und lässt daraus neue &lt;a href=&quot;http://www.sogis.ch/daten&quot;&gt;Orthofotos&lt;/a&gt; erstellen. Als Endprodukt werden GeoTIFF mit den vier Kanälen &lt;em&gt;Rot&lt;/em&gt;, &lt;em&gt;Grün&lt;/em&gt;, &lt;em&gt;Blau&lt;/em&gt; und &lt;em&gt;nahes Infrarot&lt;/em&gt; ausgeliefert. Daraus werden anschliessend zwei abgeleitete Produkte erstellt: ein RGB-Orthofoto und ein FCIR-Orthofoto. &quot;FCIR&quot; steht für &quot;false-colour infrared&quot; und besteht aus den Kanälen &lt;em&gt;nahes Infrarot&lt;/em&gt;, &lt;em&gt;Rot&lt;/em&gt; und &lt;em&gt;Grün&lt;/em&gt; und sieht dann in etwa so aus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/ndvi_orthofotos/fcir.jpg&quot; alt=&quot;FCIR Beispiel&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hilfreich kann diese Kombination zum Beispiel für Umweltanalysen sein. Unser Fokus lag jedoch in der besseren Identifizierbarkeit von Abgrenzungen zwischen Objekten unterschiedlicher Bodenbeschaffenheit (z.B. Wasser - nicht Wasser oder Strasse - Acker/Wiese).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Auf dem &lt;a href=&quot;https://www.mapbox.com/blog/&quot;&gt;Mapbox-Blog&lt;/a&gt; sind verschiedene, interessante Beiträge was man mit Satellitenbildern und Orthofotos und den verschiedenen Kanälen anstellen kann. So auch ein &lt;a href=&quot;https://www.mapbox.com/blog/processing-rapideye-imagery/&quot;&gt;Beitrag&lt;/a&gt; zu &lt;a href=&quot;http://en.wikipedia.org/wiki/Normalized_Difference_Vegetation_Index&quot;&gt;NDVI&lt;/a&gt;. Sieht cool aus, will ich auch. Netterweise stehen auch gleich die GDAL- und ImageMagick-Befehle im Blog. Daraus lässt sich leicht für unsere Daten ein Skript erstellen:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;#!/bin/bash

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/gdal/gdal-dev/lib
export PYTHONPATH=$PYTHONPATH:/usr/local/lib/python2.6/dist-packages/GDAL-2.0.0-py2.6-linux-x86_64.egg

for FILE in /opt/Geodaten/ch/so/kva/orthofoto/2014/cir/12_5cm/*.tif
do
  BASENAME=$(basename $FILE .tif)
  OUTFILE=/home/stefan/Geodaten/NDVI_2014/${BASENAME}.tif
  OUTFILE_PREP=/home/stefan/Geodaten/NDVI_2014/${BASENAME}_prep.tif
  OUTFILE_TMP=/home/stefan/Geodaten/NDVI_2014/${BASENAME}_tmp.tif

  echo &amp;quot;Processing: ${BASENAME}.tif&amp;quot;

  cp $FILE $OUTFILE
  listgeo -tfw $OUTFILE
  rm $OUTFILE

  convert $FILE $OUTFILE_PREP

  convert -monitor $OUTFILE_PREP -fx &apos;(u.r - u.g) / (u.r + u.g + 0.001)&apos; $OUTFILE_TMP

  /usr/local/gdal/gdal-dev/bin/gdal_edit.py -a_srs EPSG:21781 $OUTFILE_TMP
  /usr/local/gdal/gdal-dev/bin/gdal_translate -co TILED=YES -co COMPRESS=LZW $OUTFILE_TMP $OUTFILE
  /usr/local/gdal/gdal-dev/bin/gdaladdo -r cubic --config COMPRESS_OVERVIEW LZW $OUTFILE 2 4 8 16 32 64 128

  rm $OUTFILE_PREP
  rm $OUTFILE_TMP
done&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 3 - 4&lt;/strong&gt;: Sind nicht relevant. Die Zeilen werden gebraucht, um dem Skript mitzuteilen, dass eine bestimmte GDAL-Version verwendet werden soll.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeile 6&lt;/strong&gt;: Hier beginnt die for-Schleife, die jede einzelne Orthofoto-Kachel verarbeitet. Da schlussendlich nur die Kanäle &lt;em&gt;Rot&lt;/em&gt; und &lt;em&gt;nahes Infrarot&lt;/em&gt; interessieren, kann das FCIR-Orthofoto für die Berechnung verwendet werden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 8 - 11&lt;/strong&gt;: Parameter für die verschiedenen (temporären) Dateien.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 15 - 17&lt;/strong&gt;: Quick &apos;n&apos; Dirty wird hier ein World-File erstellt. Da mit den ImageMagick-Befehlen die Georeferenzierung verloren geht, muss diese zum Schluss wiederhergestellt werden. Dafür brauchts das World-File.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeile 19&lt;/strong&gt;: Der später verwendetete &lt;code&gt;-fx&lt;/code&gt; Operator funktioniert am besten mit Dateien, die von ImageMagick selbst erstellt wurden. Aus diesem Grund wird das GeoTIFF mit dem &lt;code&gt;convert&lt;/code&gt; Befehl kopiert.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeile  21&lt;/strong&gt;: Hier passiert die Magie: Mit dem &lt;code&gt;-fx&lt;/code&gt; &lt;a href=&quot;http://www.imagemagick.org/script/fx.php&quot;&gt;Operator&lt;/a&gt; wird der NDVI-Wert für jedes Pixel berechnet. Falls sowohl der &lt;em&gt;nahe Infrarot&lt;/em&gt; (&lt;code&gt;u.r&lt;/code&gt;) und &lt;em&gt;rote&lt;/em&gt; (&lt;code&gt;u.g&lt;/code&gt;) Kanal einen Pixelwert von 0 aufweisen, ist der Nenner ebenfalls 0 und damit der Bruch nicht mehr definiert. Aus diesem Grund wird ein kleiner Wert beim Nenner hinzuaddiert. Dies dürfte auf das Resultat keinen Einfluss haben. Schöner wäre es natürlich wenn man das ganze mit einem if-else-Konstrukt behandeln würde.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 23 - 25&lt;/strong&gt;: Anschliessend wird die Georeferenzierung wiederhergestellt und die internen Overviews gerechnet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeilen 27 - 29&lt;/strong&gt;: Zu guter Letzt werden noch die temporären Dateien, die nicht mehr benötigt werden, gelöscht.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die ganze Berechnung dauert für circa 450 1km2 Kacheln (8000 x 8000 Pixel) rund 10 Stunden. Der Flaschenhals ist der &lt;code&gt;-fx&lt;/code&gt; Operator obwohl dieser sämtliche Kerne des Prozessors verwendet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/ndvi_orthofotos/ndvi_htop.png&quot; alt=&quot;htop cpu&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Resultat dieser CPU-Orgie sieht dann wie folgt aus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/ndvi_orthofotos/ndvi_01.jpg&quot; alt=&quot;NDVI Resultat&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Soweit so gut. Nicht wirklich spektakulär aber in etwa das was man aufgrund des Beispiels im  &lt;a href=&quot;https://www.mapbox.com/blog/processing-rapideye-imagery/&quot;&gt;Mapbox-Blog&lt;/a&gt; erwarten durfte. Augenfällig ist aber die klare Unterscheidung zwischen Strassen (keine Vegetation) und der landwirtschaftlich genutzten Flächen oder des Waldes. Für gewisse Fragestellungen (z.B. Periodische Nachführung, Erfassung von Waldstrassen) in der amtlichen Vermessung kann man sich das jetzt zunutze machen. Unter gewissen Umständen ist im normalen RGB-Orthofoto und FCIR-Orthofoto kein Strassenverlauf mehr zu erkennen. Auf dem NDVI-Bild ist ein Verlauf aber immer noch (mehr oder weniger gut) sichtbar:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/ndvi_orthofotos/rgb_02.jpg&quot; alt=&quot;RGB Bsp. 2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/ndvi_orthofotos/ndvi_02.jpg&quot; alt=&quot;NDVI Bsp. 2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/ndvi_orthofotos/rgb_03.jpg&quot; alt=&quot;RGB Bsp. 3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/ndvi_orthofotos/ndvi_03.jpg&quot; alt=&quot;NDVI Bsp. 3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/ndvi_orthofotos/rgb_04.jpg&quot; alt=&quot;RGB Bsp. 4&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/ndvi_orthofotos/ndvi_04.jpg&quot; alt=&quot;NDVI Bsp. 4&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;del&gt;Die Beispiele zum Vergleichen gibts &lt;a href=&quot;http://s.geo.admin.ch/5fc9390e46&quot;&gt;hier&lt;/a&gt;, &lt;a href =&quot;http://s.geo.admin.ch/5fc93ad569&quot;&gt;hier&lt;/a&gt; und &lt;a href=&quot;http://s.geo.admin.ch/5fc93bb5bb&quot;&gt;hier&lt;/a&gt;.&lt;/del&gt;&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Pimp your Orthophoto</title>
      <link>http://www.sogeo.services/blog/2014/09/22/pimp-your-orthofoto.html</link>
      <pubDate>Mon, 22 Sep 2014 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2014/09/22/pimp-your-orthofoto.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Werden Luftbilder zu unterschiedlichen Zeitpunkten geflogen, sind die daraus resultierenden Orthofotos farblich unterschiedlich. Was aber nicht mehr nachzuvollziehen ist, sind Unterschiede wie hier in den FCIR-Orthofotos der Jahre 2012 und 2013:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/pimp_your_orthophotos/pimp_vorher_gross.jpg&quot; alt=&quot;FCIR vorher gross&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/pimp_your_orthophotos/pimp_vorher_klein.jpg&quot; alt=&quot;FCIR vorher klein&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Orthofotos auf der linken Seite (2012) wurden zwar bei voller Belaubung geflogen jedoch sind die Farbunterschiede zu gross und die Orthofotos auf der rechten Seite (2013) scheinen einen Blaustich zu haben. Was machen?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Analyse der Bildhistogramme zeigt, dass insbesondere der rote Kanal (resp. das nahe Infrarot) sehr unterschiedlich ist und einen Shift zwischen den beiden Jahren aufweist.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hat man nur ein Bild kann man mit Gimp (o.ä.) dran schrauben bis es passt. Hat man aber 467 Kacheln macht das weniger Spass. Mit &lt;a href=&quot;http://www.imagemagick.org/&quot;&gt;ImageMagick&lt;/a&gt; geht das aber wunderbar:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;convert -channel R -gamma 2 $INPUT $OUTPUT&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mit diesem Befehl wird eine Gammakorrektur im roten Kanal durchgeführt. Mit ein wenig probieren, findet man schnell einen passenden Wert. Das Resultat sieht so aus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/pimp_your_orthophotos/pimp_nachher_gross.jpg&quot; alt=&quot;FCIR nachher gross&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/pimp_your_orthophotos/pimp_nachher_klein.jpg&quot; alt=&quot;FCIR nachher klein&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der Blauschleier ist nicht mehr so extrem wie vorher. Trotzdem könnte man die Farben sicher noch besser anpassen. &lt;del&gt;Den WMS mit den angepassten Orthofotos gibts &lt;a href=&quot;http://www.catais.org/wms/orthofoto?REQUEST=GetCapabilities&amp;SERVICE=WMS&quot;&gt;hier&lt;/a&gt;.&lt;/del&gt;&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>GeoAdmin API Plugin für QGIS</title>
      <link>http://www.sogeo.services/blog/2014/08/24/geoadmin-api-plugin-fur-qgis.html</link>
      <pubDate>Sun, 24 Aug 2014 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2014/08/24/geoadmin-api-plugin-fur-qgis.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Swisstopo stellt eine &lt;a href=&quot;http://www.geo.admin.ch/internet/geoportal/de/home/services/geoservices/display_services/api_services.html&quot;&gt;Programmierschnittstelle (API)&lt;/a&gt; zur Verfügung mit der man Webseiten mit Swisstopo-Karten verschönern kann. Diese API ist sauber &lt;a href=&quot;http://api3.geo.admin.ch/index.html&quot;&gt;dokumentiert&lt;/a&gt; und neben der eigentlichen Javascript-API stehen ebenfalls auch &lt;a href=&quot;http://api3.geo.admin.ch/services/sdiservices.html&quot;&gt;REST-Schnittstellen&lt;/a&gt; online.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Interessant ist vor allem der &lt;a href=&quot;http://api3.geo.admin.ch/services/sdiservices.html#search&quot;&gt;Suchdienst&lt;/a&gt;, mit dem man neben Adressen und administrativen Einheiten (Kantone, Bezirke) auch Grundstücke suchen kann. Folgender Request liefert Informationen zum Grundstück Nr. 2585 in Solothurn:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://api3.geo.admin.ch/rest/services/api/SearchServer?searchText=Solothurn%202585&amp;amp;origins=parcel&amp;amp;type=locations&quot;&gt;http://api3.geo.admin.ch/rest/services/api/SearchServer?searchText=Solothurn%202585&amp;amp;origins=parcel&amp;amp;type=locations&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Leider darf die Adresssuche nur von der Bundesverwaltung gebraucht werden. Sucht man nach einer bestimmten Adressen, wird zwar eine Antwort geliefert, diese beinhaltet aber keine Georeferenzierung (kein &lt;code&gt;geom_st_box2d&lt;/code&gt; Attribut):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://api3.geo.admin.ch/rest/services/api/SearchServer?searchText=Solothurn%20Werkhofstrasse%2017&amp;amp;origins=address&amp;amp;type=locations&quot;&gt;http://api3.geo.admin.ch/rest/services/api/SearchServer?searchText=Solothurn%20Werkhofstrasse%2017&amp;amp;origins=address&amp;amp;type=locations&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ebenfalls gesucht werden können Layer, die in der GeoAdmin API zur Verfügung stehen. Dieser Request liefert Layer zur Thematik &lt;em&gt;Fixpunkte&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://api3.geo.admin.ch/rest/services/api/SearchServer?searchText=Fixpunkte&amp;amp;type=layers&quot;&gt;http://api3.geo.admin.ch/rest/services/api/SearchServer?searchText=Fixpunkte&amp;amp;type=layers&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Zu guter Letzt lassen sich mit dem Suchdienst auch Features suchen, z.B. den Fixpunkt 11277510:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://api3.geo.admin.ch/rest/services/api/SearchServer?features=ch.swisstopo.fixpunkte-lfp1&amp;amp;type=featuresearch&amp;amp;searchText=11277510&quot;&gt;http://api3.geo.admin.ch/rest/services/api/SearchServer?features=ch.swisstopo.fixpunkte-lfp1&amp;amp;type=featuresearch&amp;amp;searchText=11277510&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nicht alle Layer der GeoAdmin API sind &lt;a href=&quot;http://api3.geo.admin.ch/api/faq/index.html#which-layers-are-searchable&quot;&gt;durchsuchbar&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mit diesen REST-Schnittstellen kann ein QGIS-Plugin erstellt werden, das ähnliche Funktionen bietet, wie die Suchfunktion auf &lt;a href=&quot;http://map.geo.admin.ch&quot;&gt;map.geo.admin.ch&lt;/a&gt;. Dh. Lokalisationen können gesucht werden und es kann an den ausgewählten Ort gezoomt werden. Angebotene Layer können gesucht und in QGIS hinzugefügt werden. Features von durchsuchbaren Layer können gesucht werden und ein Popup-Fenster erscheint, falls etwas ausgewählt wurde.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Screenshots:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/geoadmin_search/gas_parcel.png&quot; alt=&quot;Parzellensuche&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/geoadmin_search/gas_layer.png&quot; alt=&quot;Layersuche&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/geoadmin_search/gas_feature.png&quot; alt=&quot;Featuresuche&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Layersuche resp. das anschliessende Hinzufügen des Layers in QGIS ist noch unbefriedigend gelöst. In den Plugineinstellungen lässt sich wählen, ob der Layer als &lt;em&gt;WMS&lt;/em&gt; oder &lt;em&gt;WMTS&lt;/em&gt; hinzugefügt werden soll:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/geoadmin_search/gas_provider.png&quot; alt=&quot;Provider&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Einige der Layer sind nur als WMS, andere nur als WMTS vorhanden. So wird zuerst also versucht den Layer mit dem Provider hinzuzufügen, den man in den Einstellungen gewählt hat. Klappt das nicht, wird der andere Provider gewählt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das führt auch gleich zum Thema/&lt;strong&gt;Problem&lt;/strong&gt; &lt;em&gt;&amp;laquo;Terms of use&amp;raquo;&lt;/em&gt;. Der WMTS-Dienst darf gemäss &lt;a href=&quot;http://www.swisstopo.admin.ch/internet/swisstopo/de/home/products/services/web_services/webaccess.html&quot;&gt;Webseite&lt;/a&gt; nicht in Desktop-Applikationen verwendet werden: &quot;Nur für Websites, kein Desktop-Zugriff&quot;. Wird beim Anfordern der Kachel &lt;strong&gt;kein&lt;/strong&gt; Referer mitgeschickt, verweigert der Server die Auslieferung der Kachel. Zwar kann man sich mit einer Domain gratis &lt;a href=&quot;http://www.geo.admin.ch/internet/geoportal/de/home/services/geoservices/display_services/api_services/order_form.html&quot;&gt;registrieren&lt;/a&gt; aber die Desktop-Applikation hat halt keine Domain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bleibt der WMS-Dienst: Gewisse Layer sind nicht frei verfügbar (z.B. Pixelkarten) und nicht im &amp;laquo;normalen&amp;raquo; &lt;a href=&quot;http://wms.geo.admin.ch/?REQUEST=GetCapabilities&amp;amp;SERVICE=WMS&amp;amp;VERSION=1.0.0&quot;&gt;BGDI-WMS&lt;/a&gt; enthalten. Für diese Dienste gibt es einen zweiten &lt;a href=&quot;http://www.swisstopo.admin.ch/internet/swisstopo/de/home/products/services/web_services/geoservices/swisstopo_wms.html&quot;&gt;WMS-Dienst&lt;/a&gt;. 5000 Megapixel/Jahr sind &lt;a href=&quot;http://www.toposhop.admin.ch/de/shop/products/geoservice/swisstopoWMS&quot;&gt;gratis&lt;/a&gt;. Leider lässt sich mit keiner REST-Schnittstelle exakt eruieren, ob ein Layer als WMS und/oder als WMTS verfügbar ist. So meint das Plugin, dass das Orthofoto (SWISSIMAGE) nur als WMTS-Layer verfügbar ist, da in den &lt;a href=&quot;http://api3.geo.admin.ch/rest/services/api/MapServer?searchText=ch.swisstopo.swissimage&quot;&gt;Metainformation&lt;/a&gt; beim Layer &lt;code&gt;ch.swisstopo.swissimage&lt;/code&gt; das Attribut &lt;code&gt;wmsUrlResource&lt;/code&gt; fehlt. Login und Passwort für den geschützten WMS lassen sich in den Plugineinstellungen speichern. Es macht den Anschein, dass entweder mein Plugin, QGIS oder der passwortgeschützte WMS von Zeit zu Zeit Probleme beim Verbinden verursacht. Erscheint in QGIS die Fehlermeldung &lt;code&gt;Error: Layer is not valid.&lt;/code&gt; lohnt sich ein erneuter Versuch (irgend ein &amp;laquo;Redirect loop detected&amp;raquo;-Problem).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Plugin &lt;em&gt;GeoAdmin Search&lt;/em&gt; liegt im &lt;a href=&quot;http://plugins.qgis.org/plugins/plugins.xml?qgis=2.4&quot;&gt;QGIS Plugin Repository&lt;/a&gt;. Quellcode gibts hier: &lt;a href=&quot;https://bitbucket.org/edigonzales/qgis_geoadminsearch&quot;&gt;https://bitbucket.org/edigonzales/qgis_geoadminsearch&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Vom Webdienst zum Bulkdownload</title>
      <link>http://www.sogeo.services/blog/2014/06/08/vom-webdienst-zum-bulkdownload.html</link>
      <pubDate>Sun, 8 Jun 2014 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2014/06/08/vom-webdienst-zum-bulkdownload.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Chris Herwig &lt;a href=&quot;https://www.mapbox.com/blog/trouble-with-geoportals/&quot;&gt;erkennt&lt;/a&gt; drei Hauptgruppen von Open Government Daten Benutzer:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Gelegenheitsuser&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Benutzer, die mittels einer API Zugriff auf die Daten wünschen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;laquo;Bulk&amp;raquo;-Datenuser: Diese User wollen grosse Datenmengen (und auch komplette Datensätze) herunterladen.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ein möglicher technischer Umsetzungsansatz ist das Verbinden von Gruppe 2 und 3. Der Webdienst von Gruppe 2 wird verwendet, um die vorgefertigten Datensätze für Gruppe 3 herzustellen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anlass für das Rumspielen war ebenfalls das neue Geodatenformat &lt;a href=&quot;http://sourcepole.ch/assets/2013/6/13/fossgis13_geopackage.pdf&quot;&gt;&lt;em&gt;Geopackage&lt;/em&gt;&lt;/a&gt;, das seit &lt;a href=&quot;http://trac.osgeo.org/gdal/wiki/Release/1.11.0-News&quot;&gt;Version 1.11&lt;/a&gt; in GDAL/OGR unterstützt wird. Da QGIS ebenfalls GDAL/OGR einsetzt, wird das Datenformat auch in QGIS unterstützt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Als Webdienst wird der &lt;a href=&quot;http://www.catais.org/wfs/mopublic?SERVICE=WFS&amp;amp;REQUEST=GetCapabilities&quot;&gt;MOpublic-WFS&lt;/a&gt; verwendet. Das Herstellen der einzelnen Datensätze/Geopackages übernimmt ein kleines Pythonskript:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;python&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
24
25
26
27
28
29
&lt;strong&gt;30&lt;/strong&gt;
31
32
33
34
35
36
37
38
39
&lt;strong&gt;40&lt;/strong&gt;
41
42
43
44
45
46
47
48
49
&lt;strong&gt;50&lt;/strong&gt;
51
52
53
54
55
56
57
58
59
&lt;strong&gt;60&lt;/strong&gt;
61
62
63
64
65
66
67
68
69
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;osgeo.gdal&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;osgeo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;ogr&lt;/span&gt;


&lt;span class=&quot;comment&quot;&gt;# VARS&lt;/span&gt;
GPKG_DIR = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/opt/Geodaten/ch/so/kva/av/mopublic/gpkg/lv03/d/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;# Enable exceptions&lt;/span&gt;
ogr.UseExceptions()

&lt;span class=&quot;comment&quot;&gt;# Get all the layer names&lt;/span&gt;
layer_list = []
driver = ogr.GetDriverByName(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;WFS&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;)
ds_mopublic = driver.Open(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;WFS:http://www.catais.org/wfs/mopublic?&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;, ds_mopublic.GetLayerCount()):
    layer = ds_mopublic.GetLayerByIndex(i)
    layer_list.append(layer.GetName())

ds_mopublic.Destroy()

&lt;span class=&quot;comment&quot;&gt;# Export new deliveries&lt;/span&gt;
ds_lieferungen = driver.Open(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;WFS:http://www.catais.org/wfs/av_lieferungen?&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
layer_lieferungen = ds_lieferungen.GetLayerByName(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;lieferungen_heute&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; feature &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; layer_lieferungen:
    gem_bfs = feature.GetField(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;gem_bfs&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;)

    out = os.path.join(GPKG_DIR, &lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(gem_bfs) + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.gpkg&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
    out_driver = ogr.GetDriverByName(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;GPKG&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; os.path.exists(out):
        out_driver.DeleteDataSource(out)

    out_datasource = out_driver.CreateDataSource(out)

    filter = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;&amp;amp;FILTER=%3Cogc:Filter%20xmlns:ogc=%22http://www.opengis.net/ogc%22%3E%0A%20%3Cogc:PropertyIsEqualTo%3E%0A%20%20%3Cogc:PropertyName%3Ebfsnr%3C/ogc:PropertyName%3E%0A%20%20%3Cogc:Literal%3E&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + &lt;span class=&quot;predefined&quot;&gt;str&lt;/span&gt;(gem_bfs) + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;%3C/ogc:Literal%3E%0A%20%3C/ogc:PropertyIsEqualTo%3E%0A%3C/ogc:Filter%3E%0A&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;predefined&quot;&gt;len&lt;/span&gt;(layer_list)):
        wfs_string = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;WFS:http://www.catais.org/wfs/mopublic?TYPENAME&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + layer_list[i] + &lt;span class=&quot;predefined&quot;&gt;filter&lt;/span&gt;
        ds_mopublic = driver.Open(wfs_string)
        layer_mopublic = ds_mopublic.GetLayerByName(layer_list[i])
        out_layer = out_datasource.CopyLayer(layer_mopublic, layer_list[i])

        ds_mopublic.Destroy()

ds_lieferungen.Destroy()


&lt;span class=&quot;comment&quot;&gt;# Export whole canton&lt;/span&gt;
ds_mopublic = driver.Open(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;WFS:http://www.catais.org/wfs/mopublic?&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

out = os.path.join(GPKG_DIR,  &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;kanton.gpkg&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
out_driver = ogr.GetDriverByName(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;GPKG&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; os.path.exists(out):
    out_driver.DeleteDataSource(out)

out_datasource = out_driver.CreateDataSource(out)

&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;predefined&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;predefined&quot;&gt;len&lt;/span&gt;(layer_list)):
    layer_mopublic = ds_mopublic.GetLayerByName(layer_list[i])
    out_layer = out_datasource.CopyLayer(layer_mopublic, layer_list[i])

ds_mopublic.Destroy()&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeile 16 - 24&lt;/strong&gt;: Es werden zuerst alle Layernamen des WFS in eine Liste geschrieben. Diese Layer werden später gemeindeweise angefordert und als GeoPackage gespeichert.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeile 27 - 28&lt;/strong&gt;: Ein weiterer WFS liefert die neuen Datenlieferungen (Gemeinden, die heute Nacht geliefert wurden).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeile 30 - 49&lt;/strong&gt;: Die Layer werden nun gemeindeweise angefordert und pro Gemeinde in eine GeoPackage-Datei gespeichert.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OGR hat eine Methode &lt;code&gt;layer.SetAttributeFilter(&quot;gem_bfs = 2549&quot;)&lt;/code&gt;, die Datensätze nach Attribute filtern kann. Dies funktioniert beim OGR-WFS-Treiber entweder auf der Serverseite (bevorzugt) oder auf der Klientenseite. Da QGIS-Server (hier als WFS-Server eingesetzt) in der GetCapabilities-Antwort die &amp;laquo;LogicalOperators&amp;raquo; &lt;a href=&quot;http://osgeo-org.1560.x6.nabble.com/gdal-dev-WFS-driver-and-filtering-td5144594.html&quot;&gt;nicht auflistet&lt;/a&gt;, sie aber versteht, verwendet OGR nur das klientenseitige Filtern. Das hat zur Folge, dass zuerst immer sämtliche Daten vom Server geholt werden müssen. Um dies zu verhindern, kann der Filter direkt in der URL angegeben werden (Zeile 41 und 44/45).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Zeile 55 - 69&lt;/strong&gt;: Nach dem gemeindeweisen Erstellen der GeoPackages wird ein GeoPackage für den ganzen Kanton Solothurn erstellt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Funktionierts?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Skript lokal ausgeführt braucht circa 1.5 Stunden für das Erstellen sämtlicher 109 Gemeinden. Das Skript auf dem gleichen Server ausgeführt, auf dem der WFS läuft, dauert länger (circa 2.5 Stunden). Der lokale Rechner hat im Gegensatz zum Server eine SSD. Eventuell kann das ein Flaschenhals sein. Interessanterweise macht die kürzere Downloadzeit das nicht wett.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Laden, Zoomen und Pannen funktioniert in QGIS 2.3 (kompiliert mit GDAL/OGR 2.0.0dev) tadellos und sehr schnell. Einzig das Scrollen in der Attributtabelle ist einiges zäher und käsiger als mit Postgis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Daten können &lt;a href=&quot;http://www.catais.org/geodaten/ch/so/kva/av/mopublic/gpkg/lv03/d/&quot;&gt;hier&lt;/a&gt; heruntergeladen werden.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Fun with GeoKettle Episode 1</title>
      <link>http://www.sogeo.services/blog/2014/02/09/fun-with-geokettle-episode-1.html</link>
      <pubDate>Sun, 9 Feb 2014 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2014/02/09/fun-with-geokettle-episode-1.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der &lt;a href=&quot;http://www.swisstopo.admin.ch/internet/swisstopo/de/home/topics/survey/lv95/lv03-lv95.html&quot;&gt;Bezugsrahmenwechsel&lt;/a&gt; steht &lt;a href=&quot;http://www.admin.ch/opc/de/classified-compilation/20071088/index.html#a53&quot;&gt;vor der Tür&lt;/a&gt; und viele Geodaten müssen früher oder später transformiert werden. Swisstopo bietet einen &lt;a href=&quot;http://www.swisstopo.admin.ch/internet/swisstopo/de/home/apps/calc/reframe.html&quot;&gt;Webdienst&lt;/a&gt; und ein &lt;a href=&quot;http://www.swisstopo.admin.ch/internet/swisstopo/de/home/products/software/products/reframe_fme.html&quot;&gt;FME-Plugin&lt;/a&gt; für diese Transformation an.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Für das ETL-Tool &lt;a href=&quot;http://www.spatialytics.org/projects/geokettle/&quot;&gt;GeoKettle&lt;/a&gt; habe ich ein Plugin geschrieben, das diese Transformation für Vektordaten als &amp;laquo;Transform-Step&amp;raquo; anbietet. Das Plugin kann auf Github heruntergeladen werden: &lt;a href=&quot;https://github.com/edigonzales/geokettle_freeframe_plugin/releases&quot;&gt;FreeFrame.zip&lt;/a&gt;. Die Zip-Datei muss entpackt und in den Ordner &lt;code&gt;plugins/steps&lt;/code&gt; von GeoKettle kopiert werden. Hat die Installation geklappt, erscheint unter Design - Transform ein neuer Step: &amp;laquo;FreeFrame Plugin&amp;raquo; Eine (marginal) ausführlichere Installationsanleitung findet sich &lt;a href=&quot;https://github.com/edigonzales/geokettle_freeframe_plugin&quot;&gt;hier&lt;/a&gt;. Zum Ausprobieren habe ich ein &lt;a href=&quot;http://www.catais.org/tmp/geokettle-2.5.zip&quot;&gt;Sorglos-Paket&lt;/a&gt; zusammengestellt, das aus GeoKettle und dem Plugin selbst besteht. Es wird &lt;strong&gt;nicht&lt;/strong&gt; mit jeder neuen Plugin-Version aktualisiert.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Anwendung ist einfach: Der Transformationsschritt kann innerhalb GeoKettle zu einem beliebigen Zeitpunkt angewendet werden, z.B. vor dem Export einer Datenbanktabelle in eine Shapedatei:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/fun_with_geokettle_ep1/postgis2shape.png&quot; alt=&quot;Postgis 2 Shape&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Viel einstellen muss/kann man nicht:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/fun_with_geokettle_ep1/einstellungen.png&quot; alt=&quot;Plugin Einstellungen&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Apply transformation on&lt;/code&gt;: Die gewünschte Geometriespalte, die transformiert werden soll.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Source reference frame&lt;/code&gt;: Quell-Referenzrahmen (LV03 oder LV95)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Target reference frame&lt;/code&gt;: Ziel-Referenzrahmen (LV03 oder LV95)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Triangular transformation network&lt;/code&gt;: Dreiecksvermaschungsdatensatz (CHENyx06)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das Plugin prüft &lt;strong&gt;nicht&lt;/strong&gt;, ob die Geometrien im richtigen Koordinatensystem vorliegen. Wählt man also z.B. als Quell-Referenzrahmen &amp;laquo;LV03&amp;raquo; aus und die Input-Geometrien sind in einem anderen Koordinatensystem (also &lt;strong&gt;nicht&lt;/strong&gt; EPSG:21781) erhält man keine befriedigenden und sinnvollen Resultate. Für vorgängige Koordinatentransformationen kann der &amp;laquo;SRS Transformation&amp;raquo;-Schritt verwendet werden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Liegen die zu transformierenden Koordinaten nicht innerhalb der Dreiecksvermaschung wird keine Transformation durchgeführt und die Koordinaten werden unverändert weitergeleitet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stimmt die Transformation auch? Als kleine &lt;a href=&quot;https://raw2.github.com/edigonzales/geokettle_freeframe_plugin/master/data/verification/vergleich_swisstopo_geokettle.ktr&quot;&gt;GeoKettle-Übung&lt;/a&gt; habe ich Punktkoordinaten verglichen, die ich mit dem swissopo-Dienst und mit GeoKettle transformiert habe:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/fun_with_geokettle_ep1/swisstopo_vs_geokettle.png&quot; alt=&quot;Vergleich swisstopo vs. GeoKettle&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die &lt;a href=&quot;https://github.com/edigonzales/geokettle_freeframe_plugin/blob/master/data/verification/vergleich_swisstopo_geokettle.xls?raw=true&quot;&gt;Resultate&lt;/a&gt; zeigen, dass es ausser Kleinstdifferenzen aus (wahrscheinlich?) nummerischen Gründen keine Unterschiede gibt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der Transformationsschritt ist vernünftig schnell: Für das Exportieren der gesamten Bodenbedeckung des Kantons Solothurn (circa 270&apos;000 Polygone) aus einer PostgreSQL/Postgis-Datenbank in eine Shape-Datei benötigt GeoKettle &lt;strong&gt;ohne&lt;/strong&gt; Transformation circa 40 Sekunden; &lt;strong&gt;mit&lt;/strong&gt; Transformation werden knapp 100 Sekunden benötigt. Das Transformieren der gleichen Datenbanktabelle inkl. Speichern  in einer neuen Datenbanktabelle benötigt circa 130 Sekunden. Für den Test wurde ein Hetzner-Server (Intel i7-3770, HDD im Software-Raid 1, Ubuntu 10.04) verwendet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Was bringt die Zukunft:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Einbinden von kantonalen Dreiecksvermaschungen, z.B. &lt;a href=&quot;http://www.lv95.bve.be.ch/lv95_bve/de/index/navi/index/haeufig_gestelltefragen/glossar.html#anker-anchor-10&quot;&gt;BEENyx15&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automatische Detektierung der Geometriespalte(n). So wird es möglich sein alle Tabellen einer Datenbank oder eines Datenbankschemas in einem Rutsch zu transformieren.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der Quellcode des Plugins befindet sich auf &lt;a href=&quot;https://github.com/edigonzales/geokettle_freeframe_plugin&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>QGIS server vs. QGIS server</title>
      <link>http://www.sogeo.services/blog/2014/01/29/qgis-server-vs-qgis-server.html</link>
      <pubDate>Wed, 29 Jan 2014 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2014/01/29/qgis-server-vs-qgis-server.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;QGIS Server ist schnell. Das zeigt die &lt;a href=&quot;http://blog.sourcepole.ch/assets/2013/6/17/fossgis_2013_performanceoptimierte_wms_dienste.pdf&quot;&gt;Präsentation&lt;/a&gt; an der FOSSGIS 2013. Ich wurde aber das Gefühl nie los, dass sich die Performance verschlechtert, falls Layer kaskadiert werden. Was verstehe ich unter &amp;laquo;kaskadiert&amp;raquo;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Häufig benutzte Grundlagen- resp. Hintergrundkarten werden einmalig erstellt und über &lt;strong&gt;eine&lt;/strong&gt; Schnittstelle (WMS) zur Verfügung gestellt. Dies ist vor allem praktisch, falls die Grundlagenkarte aus vielen einzelnen Layern und Datensätzen besteht.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Für insgesamt fünf Hintergrundkarten habe ich mit JMeter Lasttests durchgeführt:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AV-WMS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plan für das Grundbuch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Basisplan&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Orthofoto&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kombination aus Orthofoto und Basisplan resp. Plan für das Grundbuch&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dabei wurden drei Ansätze (= drei QGIS-Projekte = drei WMS-Dienste) verfolgt:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;direkt&lt;/em&gt;: Layer werden in QGIS direkt geladen, z.B. VRT-Layer für Orthofotos, Postgis für Vektordaten.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;embedded&lt;/em&gt;: Layer werden via QGIS-Projekt (Variante 1) geladen (&amp;laquo;Embed Layers and Groups&amp;#8230;&amp;#8203;&amp;raquo;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;wms&lt;/em&gt;: Layer wird von Variante 1 als WMS in QGIS-Projekt geladen (= Kaskadieren).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Testbedingungen sind wie folgt:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hetzner-Server:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Intel i7-3770 (4 Cores, 8 Threads, 3.4 - 3.9 GHz)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;16 GB RAM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2 x 3 TB HDD (7200 rpm, Software-RAID 1)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ubuntu 10.04&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PostgreSQL 8.4 / Postgis 2.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;QGIS enterprise 13.03b&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JMeter, Datenbank und QGIS auf dem gleichen Server&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Exemplarisch das Resultat des AV-WMS:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/qgisserver_vs_qgisserver/avwms_bench.png&quot; alt=&quot;AVWMS Benchmark&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Embedded Layer und Gruppen sind gleichauf mit direkt geladenen Datensätzen. Massiv hingegen ist der Einbruch unter Last bei kaskadierten Layern. Warum der Einbruch so massiv ist, entzieht sich meiner Kenntnis. Zu empfehlen sind daher kaskadierende Layer nur beschränkt. Die bessere Lösung ist das direkte Einbinden der Datensätze oder &amp;laquo;eingebettete&amp;raquo; Datensätze.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Für alle anderen Hintergrundkarten zeigt sich exakt das gleiche Bild. Sämtliche Resultate und einige Beispielbilder gibts &lt;a href=&quot;http://edigonzales.github.io/qgisserver_vs_qgisserver/&quot;&gt;hier&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Smoothe Höhenkurven</title>
      <link>http://www.sogeo.services/blog/2014/01/03/smoothe-hoehenkurven.html</link>
      <pubDate>Fri, 3 Jan 2014 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2014/01/03/smoothe-hoehenkurven.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mit &lt;a href=&quot;http://www.gdal.org/gdal_contour.html&quot;&gt;gdal_contour&lt;/a&gt; steht ein Programm zur Verfügung, das aus einem digitalen Terrainmodell Höhenkurven berechnet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;gdal_contour -a elev dtm110733.tif contour.shp -i 10.0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mit diesem Befehl werden Höhenkurven mit einer Äquidistanz von 10 Metern erzeugt und in der Shapedatei  &lt;code&gt;contour.shp&lt;/code&gt; gespeichert. Zusätzlich wird die Höhe in das Attribut &lt;code&gt;elev&lt;/code&gt; geschrieben.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ohne jegliches Zutun wirken die Höhenkurven aber unruhig und es sind viele &amp;laquo;Kleinst&amp;raquo;-Höhenkurven vorhanden:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/smoothe-hoehenkurven/contour_5000.png&quot; alt=&quot;Höhenkurven mit gdal_contour&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ein schöneres Kartenbild ergibt sich durch vorgängiges Prozessieren des digitalen Terrainmodells. Mit einem Shell-Skript wird das Terrainmodell zehn Mal mit einer bestimmten Resamplingmethode umprojiziert. Das Umprojizieren ist in diesem Fall aber belanglos, da a) nichts umprojiziert wird und b) nur das Verschmieren der Rasterwerte durch das Resampling interessiert:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ruby&quot;&gt;&lt;table class=&quot;CodeRay&quot;&gt;&lt;tr&gt;
  &lt;td class=&quot;line-numbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;doctype&quot;&gt;#!/bin/bash&lt;/span&gt;

cp &lt;span class=&quot;global-variable&quot;&gt;$1&lt;/span&gt; tmp_&lt;span class=&quot;global-variable&quot;&gt;$1&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; {&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;..&lt;span class=&quot;integer&quot;&gt;10&lt;/span&gt;}
&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;
  gdalwarp -co &lt;span class=&quot;constant&quot;&gt;COMPRESS&lt;/span&gt;=&lt;span class=&quot;constant&quot;&gt;PACKBITS&lt;/span&gt; -overwrite -r cubicspline tmp_&lt;span class=&quot;global-variable&quot;&gt;$1&lt;/span&gt; smooth_&lt;span class=&quot;global-variable&quot;&gt;$1&lt;/span&gt;
  cp smooth_&lt;span class=&quot;global-variable&quot;&gt;$1&lt;/span&gt; tmp_&lt;span class=&quot;global-variable&quot;&gt;$1&lt;/span&gt;
done

rm contour_smooth.*
gdal_contour -a elev smooth_&lt;span class=&quot;global-variable&quot;&gt;$1&lt;/span&gt; contour_smooth.shp -i &lt;span class=&quot;float&quot;&gt;10.0&lt;/span&gt;

ogr2ogr -overwrite -dialect &lt;span class=&quot;constant&quot;&gt;SQLITE&lt;/span&gt; contour_smooth_reduced.shp contour_smooth.shp -sql &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;SELECT * FROM  contour_smooth WHERE ST_Length(GEOMETRY) &amp;gt; 100&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Das 10-fache Resampling findet in der for-Schleife statt. Anschliessend werden die Höhenkurven erzeugt. Der letzte Befehl löscht alle Höhenkurven, deren Länge kleiner 100 Meter ist. Dieser Befehl funktioniert erst mit gdal &amp;ge; 1.10.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et voilà:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../../../images/smoothe-hoehenkurven/contour_smooth_reduced_5000.png&quot; alt=&quot;Smoothe Höhenkurven&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>

  </channel> 
</rss>
